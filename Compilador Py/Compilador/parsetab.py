
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND_OP ARROW BOOL BOX_PAR_CLOSE BOX_PAR_OPEN CHAR COLON COMMA CONST CUR_PAR_CLOSE CUR_PAR_OPEN DEC_OP DIV DO ELSE EQUALS EQ_OP FLOAT FLOAT_LITERAL FROM FUNC GE_OP GREATER_OP IDENTIFIER IF INC_OP INT INT_LITERAL LESS_OP LET LE_OP MINUS MUL NE_OP OR_OP PLUS QUESTION RND_PAR_CLOSE RND_PAR_OPEN SEMICOLON STRING STRING_LITERAL VOID WHILE\n    program : declaration\n        | program declaration\n        | function_definition\n        | iteration_statement\n        | selection_statement\n    \n    declaration : init_declarator SEMICOLON \n    \n    init_declarator : declarator\n        | declarator EQUALS assignment_expression\n    \n    declarator : LET IDENTIFIER COLON type_specifier\n        | CONST IDENTIFIER COLON type_specifier\n    \n    type_specifier : VOID\n        | CHAR\n        | INT\n        | FLOAT\n        | STRING\n        | BOOL\n    \n    literal : INT_LITERAL\n        | FLOAT_LITERAL\n        | STRING_LITERAL\n    \n    primary_expression : IDENTIFIER\n        | literal\n    \n    additive_expression : primary_expression          \n        | additive_expression PLUS primary_expression\n        | additive_expression MINUS primary_expression\n    \n    multiplicative_expression : additive_expression\n        | multiplicative_expression MUL additive_expression\n        | multiplicative_expression DIV additive_expression\n    \n    assignment_expression : multiplicative_expression\n        | primary_expression EQUALS multiplicative_expression\n    \n    selection_statement : IF conditional_expression compound_statement\n        | IF conditional_expression compound_statement ELSE compound_statement\n    \n    statement : declaration\n        | iteration_statement\n        | selection_statement\n    \n    statement_list : statement\n        | statement_list statement\n    \n    compound_statement : CUR_PAR_OPEN CUR_PAR_CLOSE\n        | CUR_PAR_OPEN statement_list CUR_PAR_CLOSE\n    \n    identifier_list : IDENTIFIER\n        | identifier_list COMMA IDENTIFIER\n    \n    relational_expression : multiplicative_expression\n        | relational_expression LESS_OP multiplicative_expression\n        | relational_expression GREATER_OP multiplicative_expression\n        | relational_expression LE_OP multiplicative_expression\n        | relational_expression GE_OP multiplicative_expression\n    \n    equality_expression : relational_expression\n        | equality_expression EQ_OP relational_expression\n        | equality_expression NE_OP relational_expression\n    \n    and_expression : equality_expression\n        | and_expression AND_OP equality_expression\n    \n    or_expression : and_expression\n        | or_expression OR_OP and_expression\n    \n    conditional_expression : or_expression\n        | or_expression QUESTION assignment_expression COLON conditional_expression\n    \n    function_definition : FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement\n    \n    iteration_statement : FROM BOX_PAR_OPEN primary_expression COMMA primary_expression BOX_PAR_CLOSE COLON INC_OP compound_statement\n        | FROM BOX_PAR_OPEN primary_expression COMMA primary_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement\n        | WHILE conditional_expression compound_statement\n        | DO compound_statement WHILE conditional_expression SEMICOLON\n    '
    
_lr_action_items = {'FUNC':([0,],[7,]),'FROM':([0,16,33,40,55,56,57,58,59,60,61,84,85,100,101,112,113,],[8,-6,8,-58,-37,8,-35,-32,-33,-34,-30,-38,-36,-59,-31,-56,-57,]),'WHILE':([0,16,32,33,40,55,56,57,58,59,60,61,84,85,100,101,112,113,],[9,-6,54,9,-58,-37,9,-35,-32,-33,-34,-30,-38,-36,-59,-31,-56,-57,]),'DO':([0,16,33,40,55,56,57,58,59,60,61,84,85,100,101,112,113,],[10,-6,10,-58,-37,10,-35,-32,-33,-34,-30,-38,-36,-59,-31,-56,-57,]),'IF':([0,16,33,40,55,56,57,58,59,60,61,84,85,100,101,112,113,],[11,-6,11,-58,-37,11,-35,-32,-33,-34,-30,-38,-36,-59,-31,-56,-57,]),'LET':([0,1,2,3,4,5,15,16,33,40,55,56,57,58,59,60,61,84,85,100,101,109,112,113,],[13,13,-1,-3,-4,-5,-2,-6,13,-58,-37,13,-35,-32,-33,-34,-30,-38,-36,-59,-31,-55,-56,-57,]),'CONST':([0,1,2,3,4,5,15,16,33,40,55,56,57,58,59,60,61,84,85,100,101,109,112,113,],[14,14,-1,-3,-4,-5,-2,-6,14,-58,-37,14,-35,-32,-33,-34,-30,-38,-36,-59,-31,-55,-56,-57,]),'$end':([1,2,3,4,5,15,16,40,55,61,84,100,101,109,112,113,],[0,-1,-3,-4,-5,-2,-6,-58,-37,-30,-38,-59,-31,-55,-56,-57,]),'SEMICOLON':([6,12,20,21,22,23,24,25,26,27,28,29,30,31,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,88,89,90,91,92,93,94,95,102,106,],[16,-7,-53,-51,-49,-46,-41,-25,-22,-20,-21,-17,-18,-19,-8,-28,-22,-52,-50,-47,-48,-42,-43,-44,-45,-26,-27,-23,-24,100,-9,-11,-12,-13,-14,-15,-16,-10,-29,-54,]),'IDENTIFIER':([7,9,11,13,14,18,35,38,41,42,43,44,45,46,47,48,49,50,51,52,53,54,69,87,97,99,],[17,27,27,36,37,27,27,67,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,104,27,]),'BOX_PAR_OPEN':([8,],[18,]),'INT_LITERAL':([9,11,18,35,41,42,43,44,45,46,47,48,49,50,51,52,53,54,69,87,99,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'FLOAT_LITERAL':([9,11,18,35,41,42,43,44,45,46,47,48,49,50,51,52,53,54,69,87,99,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'STRING_LITERAL':([9,11,18,35,41,42,43,44,45,46,47,48,49,50,51,52,53,54,69,87,99,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'CUR_PAR_OPEN':([10,19,20,21,22,23,24,25,26,27,28,29,30,31,34,71,72,73,74,75,76,77,78,79,80,81,82,86,89,90,91,92,93,94,106,107,110,111,],[33,33,-53,-51,-49,-46,-41,-25,-22,-20,-21,-17,-18,-19,33,-52,-50,-47,-48,-42,-43,-44,-45,-26,-27,-23,-24,33,-11,-12,-13,-14,-15,-16,-54,33,33,33,]),'EQUALS':([12,27,28,29,30,31,64,88,89,90,91,92,93,94,95,],[35,-20,-21,-17,-18,-19,87,-9,-11,-12,-13,-14,-15,-16,-10,]),'CUR_PAR_CLOSE':([16,33,40,55,56,57,58,59,60,61,84,85,100,101,112,113,],[-6,55,-58,-37,84,-35,-32,-33,-34,-30,-38,-36,-59,-31,-56,-57,]),'RND_PAR_OPEN':([17,],[38,]),'QUESTION':([20,21,22,23,24,25,26,27,28,29,30,31,71,72,73,74,75,76,77,78,79,80,81,82,],[41,-51,-49,-46,-41,-25,-22,-20,-21,-17,-18,-19,-52,-50,-47,-48,-42,-43,-44,-45,-26,-27,-23,-24,]),'OR_OP':([20,21,22,23,24,25,26,27,28,29,30,31,71,72,73,74,75,76,77,78,79,80,81,82,],[42,-51,-49,-46,-41,-25,-22,-20,-21,-17,-18,-19,-52,-50,-47,-48,-42,-43,-44,-45,-26,-27,-23,-24,]),'AND_OP':([21,22,23,24,25,26,27,28,29,30,31,71,72,73,74,75,76,77,78,79,80,81,82,],[43,-49,-46,-41,-25,-22,-20,-21,-17,-18,-19,43,-50,-47,-48,-42,-43,-44,-45,-26,-27,-23,-24,]),'EQ_OP':([22,23,24,25,26,27,28,29,30,31,72,73,74,75,76,77,78,79,80,81,82,],[44,-46,-41,-25,-22,-20,-21,-17,-18,-19,44,-47,-48,-42,-43,-44,-45,-26,-27,-23,-24,]),'NE_OP':([22,23,24,25,26,27,28,29,30,31,72,73,74,75,76,77,78,79,80,81,82,],[45,-46,-41,-25,-22,-20,-21,-17,-18,-19,45,-47,-48,-42,-43,-44,-45,-26,-27,-23,-24,]),'LESS_OP':([23,24,25,26,27,28,29,30,31,73,74,75,76,77,78,79,80,81,82,],[46,-41,-25,-22,-20,-21,-17,-18,-19,46,46,-42,-43,-44,-45,-26,-27,-23,-24,]),'GREATER_OP':([23,24,25,26,27,28,29,30,31,73,74,75,76,77,78,79,80,81,82,],[47,-41,-25,-22,-20,-21,-17,-18,-19,47,47,-42,-43,-44,-45,-26,-27,-23,-24,]),'LE_OP':([23,24,25,26,27,28,29,30,31,73,74,75,76,77,78,79,80,81,82,],[48,-41,-25,-22,-20,-21,-17,-18,-19,48,48,-42,-43,-44,-45,-26,-27,-23,-24,]),'GE_OP':([23,24,25,26,27,28,29,30,31,73,74,75,76,77,78,79,80,81,82,],[49,-41,-25,-22,-20,-21,-17,-18,-19,49,49,-42,-43,-44,-45,-26,-27,-23,-24,]),'MUL':([24,25,26,27,28,29,30,31,63,64,75,76,77,78,79,80,81,82,102,],[50,-25,-22,-20,-21,-17,-18,-19,50,-22,50,50,50,50,-26,-27,-23,-24,50,]),'DIV':([24,25,26,27,28,29,30,31,63,64,75,76,77,78,79,80,81,82,102,],[51,-25,-22,-20,-21,-17,-18,-19,51,-22,51,51,51,51,-26,-27,-23,-24,51,]),'COLON':([25,26,27,28,29,30,31,36,37,63,64,70,79,80,81,82,102,105,],[-25,-22,-20,-21,-17,-18,-19,65,66,-28,-22,99,-26,-27,-23,-24,-29,108,]),'PLUS':([25,26,27,28,29,30,31,64,79,80,81,82,],[52,-22,-20,-21,-17,-18,-19,-22,52,52,-23,-24,]),'MINUS':([25,26,27,28,29,30,31,64,79,80,81,82,],[53,-22,-20,-21,-17,-18,-19,-22,53,53,-23,-24,]),'COMMA':([27,28,29,30,31,39,67,68,104,],[-20,-21,-17,-18,-19,69,-39,97,-40,]),'BOX_PAR_CLOSE':([27,28,29,30,31,98,],[-20,-21,-17,-18,-19,105,]),'ELSE':([55,61,84,],[-37,86,-38,]),'VOID':([65,66,103,],[89,89,89,]),'CHAR':([65,66,103,],[90,90,90,]),'INT':([65,66,103,],[91,91,91,]),'FLOAT':([65,66,103,],[92,92,92,]),'STRING':([65,66,103,],[93,93,93,]),'BOOL':([65,66,103,],[94,94,94,]),'RND_PAR_CLOSE':([67,68,104,],[-39,96,-40,]),'ARROW':([96,],[103,]),'INC_OP':([108,],[110,]),'DEC_OP':([108,],[111,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration':([0,1,33,56,],[2,15,58,58,]),'function_definition':([0,],[3,]),'iteration_statement':([0,33,56,],[4,59,59,]),'selection_statement':([0,33,56,],[5,60,60,]),'init_declarator':([0,1,33,56,],[6,6,6,6,]),'declarator':([0,1,33,56,],[12,12,12,12,]),'conditional_expression':([9,11,54,99,],[19,34,83,106,]),'or_expression':([9,11,54,99,],[20,20,20,20,]),'and_expression':([9,11,42,54,99,],[21,21,71,21,21,]),'equality_expression':([9,11,42,43,54,99,],[22,22,22,72,22,22,]),'relational_expression':([9,11,42,43,44,45,54,99,],[23,23,23,23,73,74,23,23,]),'multiplicative_expression':([9,11,35,41,42,43,44,45,46,47,48,49,54,87,99,],[24,24,63,63,24,24,24,24,75,76,77,78,24,102,24,]),'additive_expression':([9,11,35,41,42,43,44,45,46,47,48,49,50,51,54,87,99,],[25,25,25,25,25,25,25,25,25,25,25,25,79,80,25,25,25,]),'primary_expression':([9,11,18,35,41,42,43,44,45,46,47,48,49,50,51,52,53,54,69,87,99,],[26,26,39,64,64,26,26,26,26,26,26,26,26,26,26,81,82,26,98,26,26,]),'literal':([9,11,18,35,41,42,43,44,45,46,47,48,49,50,51,52,53,54,69,87,99,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'compound_statement':([10,19,34,86,107,110,111,],[32,40,61,101,109,112,113,]),'statement_list':([33,],[56,]),'statement':([33,56,],[57,85,]),'assignment_expression':([35,41,],[62,70,]),'identifier_list':([38,],[68,]),'type_specifier':([65,66,103,],[88,95,107,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration','program',1,'p_program','syntactic.py',14),
  ('program -> program declaration','program',2,'p_program','syntactic.py',15),
  ('program -> function_definition','program',1,'p_program','syntactic.py',16),
  ('program -> iteration_statement','program',1,'p_program','syntactic.py',17),
  ('program -> selection_statement','program',1,'p_program','syntactic.py',18),
  ('declaration -> init_declarator SEMICOLON','declaration',2,'p_declaration','syntactic.py',24),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','syntactic.py',31),
  ('init_declarator -> declarator EQUALS assignment_expression','init_declarator',3,'p_init_declarator','syntactic.py',32),
  ('declarator -> LET IDENTIFIER COLON type_specifier','declarator',4,'p_declarator','syntactic.py',39),
  ('declarator -> CONST IDENTIFIER COLON type_specifier','declarator',4,'p_declarator','syntactic.py',40),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','syntactic.py',52),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','syntactic.py',53),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','syntactic.py',54),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','syntactic.py',55),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','syntactic.py',56),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','syntactic.py',57),
  ('literal -> INT_LITERAL','literal',1,'p_literal','syntactic.py',65),
  ('literal -> FLOAT_LITERAL','literal',1,'p_literal','syntactic.py',66),
  ('literal -> STRING_LITERAL','literal',1,'p_literal','syntactic.py',67),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','syntactic.py',75),
  ('primary_expression -> literal','primary_expression',1,'p_primary_expression','syntactic.py',76),
  ('additive_expression -> primary_expression','additive_expression',1,'p_additive_expression','syntactic.py',84),
  ('additive_expression -> additive_expression PLUS primary_expression','additive_expression',3,'p_additive_expression','syntactic.py',85),
  ('additive_expression -> additive_expression MINUS primary_expression','additive_expression',3,'p_additive_expression','syntactic.py',86),
  ('multiplicative_expression -> additive_expression','multiplicative_expression',1,'p_multiplicative_expression','syntactic.py',101),
  ('multiplicative_expression -> multiplicative_expression MUL additive_expression','multiplicative_expression',3,'p_multiplicative_expression','syntactic.py',102),
  ('multiplicative_expression -> multiplicative_expression DIV additive_expression','multiplicative_expression',3,'p_multiplicative_expression','syntactic.py',103),
  ('assignment_expression -> multiplicative_expression','assignment_expression',1,'p_assignment_expression','syntactic.py',118),
  ('assignment_expression -> primary_expression EQUALS multiplicative_expression','assignment_expression',3,'p_assignment_expression','syntactic.py',119),
  ('selection_statement -> IF conditional_expression compound_statement','selection_statement',3,'p_selection_statement','syntactic.py',130),
  ('selection_statement -> IF conditional_expression compound_statement ELSE compound_statement','selection_statement',5,'p_selection_statement','syntactic.py',131),
  ('statement -> declaration','statement',1,'p_statement','syntactic.py',136),
  ('statement -> iteration_statement','statement',1,'p_statement','syntactic.py',137),
  ('statement -> selection_statement','statement',1,'p_statement','syntactic.py',138),
  ('statement_list -> statement','statement_list',1,'p_statement_list','syntactic.py',143),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','syntactic.py',144),
  ('compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE','compound_statement',2,'p_compound_statement','syntactic.py',149),
  ('compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE','compound_statement',3,'p_compound_statement','syntactic.py',150),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','syntactic.py',155),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','syntactic.py',156),
  ('relational_expression -> multiplicative_expression','relational_expression',1,'p_relational_expression','syntactic.py',161),
  ('relational_expression -> relational_expression LESS_OP multiplicative_expression','relational_expression',3,'p_relational_expression','syntactic.py',162),
  ('relational_expression -> relational_expression GREATER_OP multiplicative_expression','relational_expression',3,'p_relational_expression','syntactic.py',163),
  ('relational_expression -> relational_expression LE_OP multiplicative_expression','relational_expression',3,'p_relational_expression','syntactic.py',164),
  ('relational_expression -> relational_expression GE_OP multiplicative_expression','relational_expression',3,'p_relational_expression','syntactic.py',165),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','syntactic.py',170),
  ('equality_expression -> equality_expression EQ_OP relational_expression','equality_expression',3,'p_equality_expression','syntactic.py',171),
  ('equality_expression -> equality_expression NE_OP relational_expression','equality_expression',3,'p_equality_expression','syntactic.py',172),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','syntactic.py',177),
  ('and_expression -> and_expression AND_OP equality_expression','and_expression',3,'p_and_expression','syntactic.py',178),
  ('or_expression -> and_expression','or_expression',1,'p_or_expression','syntactic.py',183),
  ('or_expression -> or_expression OR_OP and_expression','or_expression',3,'p_or_expression','syntactic.py',184),
  ('conditional_expression -> or_expression','conditional_expression',1,'p_conditional_expression','syntactic.py',189),
  ('conditional_expression -> or_expression QUESTION assignment_expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','syntactic.py',190),
  ('function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement','function_definition',8,'p_function_definition','syntactic.py',195),
  ('iteration_statement -> FROM BOX_PAR_OPEN primary_expression COMMA primary_expression BOX_PAR_CLOSE COLON INC_OP compound_statement','iteration_statement',9,'p_iteration_statement','syntactic.py',200),
  ('iteration_statement -> FROM BOX_PAR_OPEN primary_expression COMMA primary_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement','iteration_statement',9,'p_iteration_statement','syntactic.py',201),
  ('iteration_statement -> WHILE conditional_expression compound_statement','iteration_statement',3,'p_iteration_statement','syntactic.py',202),
  ('iteration_statement -> DO compound_statement WHILE conditional_expression SEMICOLON','iteration_statement',5,'p_iteration_statement','syntactic.py',203),
]
