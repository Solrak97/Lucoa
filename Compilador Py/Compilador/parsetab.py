
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND_OP ARROW BOOL BOX_PAR_CLOSE BOX_PAR_OPEN CHAR COLON COMMA CONST CUR_PAR_CLOSE CUR_PAR_OPEN DEC_OP DIV ELSE EQUALS EQ_OP FLOAT FLOAT_LITERAL FROM FUNC GE_OP GREATER_OP IDENTIFIER IF INC_OP INT INT_LITERAL LESS_OP LET LE_OP MINUS MUL NE_OP OR_OP PLUS RND_PAR_CLOSE RND_PAR_OPEN SEMICOLON STRING STRING_LITERAL VOID WHILE\n    program : statement\n        | program statement\n    \n    declaration : init_declarator SEMICOLON\n        | declarator EQUALS function_call \n    \n    init_declarator : declarator\n        | declarator EQUALS assignment_expression\n    \n    declarator : LET IDENTIFIER COLON type_specifier\n        | CONST IDENTIFIER COLON type_specifier\n    \n    type_specifier : VOID\n        | CHAR\n        | INT\n        | FLOAT\n        | STRING\n        | BOOL\n    \n    literal : INT_LITERAL\n        | FLOAT_LITERAL\n        | STRING_LITERAL\n    \n    primary_expression : IDENTIFIER\n        | literal\n        | RND_PAR_OPEN assignment_expression RND_PAR_CLOSE\n    \n    additive_expression : primary_expression          \n        | additive_expression PLUS primary_expression\n        | additive_expression MINUS primary_expression\n    \n    multiplicative_expression : additive_expression\n        | multiplicative_expression MUL additive_expression\n        | multiplicative_expression DIV additive_expression\n    \n    relational_expression : multiplicative_expression\n        | relational_expression LESS_OP multiplicative_expression\n        | relational_expression GREATER_OP multiplicative_expression\n        | relational_expression LE_OP multiplicative_expression\n        | relational_expression GE_OP multiplicative_expression\n    \n    equality_expression : relational_expression\n        | equality_expression EQ_OP relational_expression\n        | equality_expression NE_OP relational_expression\n    \n    and_expression : equality_expression\n        | and_expression AND_OP equality_expression\n    \n    or_expression : and_expression\n        | or_expression OR_OP and_expression\n    \n    assignment_expression : or_expression\n        | primary_expression EQUALS multiplicative_expression\n    \n    statement : function_call\n        | compound_statement\n        | assignment_statement \n        | function_definition\n        | declaration\n        | selection_statement\n        | iteration_statement\n    \n    statement_list : statement\n        | statement_list statement\n    \n    compound_statement : CUR_PAR_OPEN CUR_PAR_CLOSE\n        | CUR_PAR_OPEN statement_list CUR_PAR_CLOSE\n    \n    assignment_statement : assignment_expression SEMICOLON\n        | primary_expression EQUALS function_call\n    \n    identifier_list : empty \n        | IDENTIFIER COLON type_specifier\n        | identifier_list COMMA IDENTIFIER  COLON  type_specifier\n    \n    parameter_list : empty \n        | assignment_expression\n        | parameter_list COMMA assignment_expression\n    \n    function_definition : FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement\n    \n    function_call : IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON\n    \n    selection_statement : IF assignment_expression compound_statement\n        | IF assignment_expression compound_statement ELSE compound_statement\n    \n    iteration_statement : FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement\n        | FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement\n        | WHILE assignment_expression compound_statement\n    empty :'
    
_lr_action_items = {'IDENTIFIER':([0,1,2,3,4,5,6,7,8,9,11,12,15,18,20,24,25,33,34,38,39,40,41,42,44,45,47,49,50,51,54,55,56,57,58,59,60,61,62,67,68,69,71,73,74,76,78,94,99,108,112,113,122,126,127,],[10,10,-1,-41,-42,-43,-44,-45,-46,-47,37,10,43,37,37,52,53,-2,37,-50,10,-48,-52,10,-3,10,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-51,-49,-53,95,-4,-62,-66,37,37,-61,117,-63,-60,-64,-65,]),'CUR_PAR_OPEN':([0,1,2,3,4,5,6,7,8,9,12,21,22,23,26,27,28,29,30,31,32,33,36,37,38,39,40,41,44,46,48,66,68,69,70,71,72,74,76,78,79,80,81,84,85,86,87,88,89,90,91,92,98,101,102,103,104,105,106,108,113,119,122,124,125,126,127,],[12,12,-1,-41,-42,-43,-44,-45,-46,-47,12,-39,-27,-19,-37,-15,-16,-17,-35,-32,-24,-2,-21,-18,-50,12,-48,-52,-3,12,12,-20,-51,-49,-21,-53,-40,-4,-62,-66,-38,-25,-26,-36,-33,-34,-28,-29,-30,-31,-22,-23,12,-9,-10,-11,-12,-13,-14,-61,-63,12,-60,12,12,-64,-65,]),'FUNC':([0,1,2,3,4,5,6,7,8,9,12,33,38,39,40,41,44,68,69,71,74,76,78,108,113,122,126,127,],[15,15,-1,-41,-42,-43,-44,-45,-46,-47,15,-2,-50,15,-48,-52,-3,-51,-49,-53,-4,-62,-66,-61,-63,-60,-64,-65,]),'IF':([0,1,2,3,4,5,6,7,8,9,12,33,38,39,40,41,44,68,69,71,74,76,78,108,113,122,126,127,],[18,18,-1,-41,-42,-43,-44,-45,-46,-47,18,-2,-50,18,-48,-52,-3,-51,-49,-53,-4,-62,-66,-61,-63,-60,-64,-65,]),'FROM':([0,1,2,3,4,5,6,7,8,9,12,33,38,39,40,41,44,68,69,71,74,76,78,108,113,122,126,127,],[19,19,-1,-41,-42,-43,-44,-45,-46,-47,19,-2,-50,19,-48,-52,-3,-51,-49,-53,-4,-62,-66,-61,-63,-60,-64,-65,]),'WHILE':([0,1,2,3,4,5,6,7,8,9,12,33,38,39,40,41,44,68,69,71,74,76,78,108,113,122,126,127,],[20,20,-1,-41,-42,-43,-44,-45,-46,-47,20,-2,-50,20,-48,-52,-3,-51,-49,-53,-4,-62,-66,-61,-63,-60,-64,-65,]),'RND_PAR_OPEN':([0,1,2,3,4,5,6,7,8,9,10,11,12,18,20,33,34,38,39,40,41,42,43,44,45,47,49,50,51,54,55,56,57,58,59,60,61,62,67,68,69,71,74,76,78,94,99,108,113,122,126,127,],[11,11,-1,-41,-42,-43,-44,-45,-46,-47,34,11,11,11,11,-2,11,-50,11,-48,-52,11,73,-3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-51,-49,-53,-4,-62,-66,11,11,-61,-63,-60,-64,-65,]),'LET':([0,1,2,3,4,5,6,7,8,9,12,33,38,39,40,41,44,68,69,71,74,76,78,108,113,122,126,127,],[24,24,-1,-41,-42,-43,-44,-45,-46,-47,24,-2,-50,24,-48,-52,-3,-51,-49,-53,-4,-62,-66,-61,-63,-60,-64,-65,]),'CONST':([0,1,2,3,4,5,6,7,8,9,12,33,38,39,40,41,44,68,69,71,74,76,78,108,113,122,126,127,],[25,25,-1,-41,-42,-43,-44,-45,-46,-47,25,-2,-50,25,-48,-52,-3,-51,-49,-53,-4,-62,-66,-61,-63,-60,-64,-65,]),'INT_LITERAL':([0,1,2,3,4,5,6,7,8,9,11,12,18,20,33,34,38,39,40,41,42,44,45,47,49,50,51,54,55,56,57,58,59,60,61,62,67,68,69,71,74,76,78,94,99,108,113,122,126,127,],[27,27,-1,-41,-42,-43,-44,-45,-46,-47,27,27,27,27,-2,27,-50,27,-48,-52,27,-3,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-51,-49,-53,-4,-62,-66,27,27,-61,-63,-60,-64,-65,]),'FLOAT_LITERAL':([0,1,2,3,4,5,6,7,8,9,11,12,18,20,33,34,38,39,40,41,42,44,45,47,49,50,51,54,55,56,57,58,59,60,61,62,67,68,69,71,74,76,78,94,99,108,113,122,126,127,],[28,28,-1,-41,-42,-43,-44,-45,-46,-47,28,28,28,28,-2,28,-50,28,-48,-52,28,-3,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-51,-49,-53,-4,-62,-66,28,28,-61,-63,-60,-64,-65,]),'STRING_LITERAL':([0,1,2,3,4,5,6,7,8,9,11,12,18,20,33,34,38,39,40,41,42,44,45,47,49,50,51,54,55,56,57,58,59,60,61,62,67,68,69,71,74,76,78,94,99,108,113,122,126,127,],[29,29,-1,-41,-42,-43,-44,-45,-46,-47,29,29,29,29,-2,29,-50,29,-48,-52,29,-3,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-51,-49,-53,-4,-62,-66,29,29,-61,-63,-60,-64,-65,]),'$end':([1,2,3,4,5,6,7,8,9,33,38,41,44,68,71,74,76,78,108,113,122,126,127,],[0,-1,-41,-42,-43,-44,-45,-46,-47,-2,-50,-52,-3,-51,-53,-4,-62,-66,-61,-63,-60,-64,-65,]),'CUR_PAR_CLOSE':([3,4,5,6,7,8,9,12,38,39,40,41,44,68,69,71,74,76,78,108,113,122,126,127,],[-41,-42,-43,-44,-45,-46,-47,38,-50,68,-48,-52,-3,-51,-49,-53,-4,-62,-66,-61,-63,-60,-64,-65,]),'EQUALS':([10,14,17,23,27,28,29,36,37,66,100,101,102,103,104,105,106,107,],[-18,42,45,-19,-15,-16,-17,67,-18,-20,-7,-9,-10,-11,-12,-13,-14,-8,]),'PLUS':([10,14,23,27,28,29,32,36,37,66,70,80,81,91,92,],[-18,-21,-19,-15,-16,-17,61,-21,-18,-20,-21,61,61,-22,-23,]),'MINUS':([10,14,23,27,28,29,32,36,37,66,70,80,81,91,92,],[-18,-21,-19,-15,-16,-17,62,-21,-18,-20,-21,62,62,-22,-23,]),'MUL':([10,14,22,23,27,28,29,32,36,37,66,70,72,80,81,87,88,89,90,91,92,],[-18,-21,50,-19,-15,-16,-17,-24,-21,-18,-20,-21,50,-25,-26,50,50,50,50,-22,-23,]),'DIV':([10,14,22,23,27,28,29,32,36,37,66,70,72,80,81,87,88,89,90,91,92,],[-18,-21,51,-19,-15,-16,-17,-24,-21,-18,-20,-21,51,-25,-26,51,51,51,51,-22,-23,]),'LESS_OP':([10,14,22,23,27,28,29,31,32,36,37,66,70,80,81,85,86,87,88,89,90,91,92,],[-18,-21,-27,-19,-15,-16,-17,57,-24,-21,-18,-20,-21,-25,-26,57,57,-28,-29,-30,-31,-22,-23,]),'GREATER_OP':([10,14,22,23,27,28,29,31,32,36,37,66,70,80,81,85,86,87,88,89,90,91,92,],[-18,-21,-27,-19,-15,-16,-17,58,-24,-21,-18,-20,-21,-25,-26,58,58,-28,-29,-30,-31,-22,-23,]),'LE_OP':([10,14,22,23,27,28,29,31,32,36,37,66,70,80,81,85,86,87,88,89,90,91,92,],[-18,-21,-27,-19,-15,-16,-17,59,-24,-21,-18,-20,-21,-25,-26,59,59,-28,-29,-30,-31,-22,-23,]),'GE_OP':([10,14,22,23,27,28,29,31,32,36,37,66,70,80,81,85,86,87,88,89,90,91,92,],[-18,-21,-27,-19,-15,-16,-17,60,-24,-21,-18,-20,-21,-25,-26,60,60,-28,-29,-30,-31,-22,-23,]),'EQ_OP':([10,14,22,23,27,28,29,30,31,32,36,37,66,70,80,81,84,85,86,87,88,89,90,91,92,],[-18,-21,-27,-19,-15,-16,-17,55,-32,-24,-21,-18,-20,-21,-25,-26,55,-33,-34,-28,-29,-30,-31,-22,-23,]),'NE_OP':([10,14,22,23,27,28,29,30,31,32,36,37,66,70,80,81,84,85,86,87,88,89,90,91,92,],[-18,-21,-27,-19,-15,-16,-17,56,-32,-24,-21,-18,-20,-21,-25,-26,56,-33,-34,-28,-29,-30,-31,-22,-23,]),'AND_OP':([10,14,22,23,26,27,28,29,30,31,32,36,37,66,70,79,80,81,84,85,86,87,88,89,90,91,92,],[-18,-21,-27,-19,54,-15,-16,-17,-35,-32,-24,-21,-18,-20,-21,54,-25,-26,-36,-33,-34,-28,-29,-30,-31,-22,-23,]),'OR_OP':([10,14,21,22,23,26,27,28,29,30,31,32,36,37,66,70,79,80,81,84,85,86,87,88,89,90,91,92,],[-18,-21,49,-27,-19,-37,-15,-16,-17,-35,-32,-24,-21,-18,-20,-21,-38,-25,-26,-36,-33,-34,-28,-29,-30,-31,-22,-23,]),'SEMICOLON':([10,13,14,16,17,21,22,23,26,27,28,29,30,31,32,36,37,66,70,72,75,79,80,81,84,85,86,87,88,89,90,91,92,93,100,101,102,103,104,105,106,107,],[-18,41,-21,44,-5,-39,-27,-19,-37,-15,-16,-17,-35,-32,-24,-21,-18,-20,-21,-40,-6,-38,-25,-26,-36,-33,-34,-28,-29,-30,-31,-22,-23,108,-7,-9,-10,-11,-12,-13,-14,-8,]),'BOX_PAR_OPEN':([19,],[47,]),'RND_PAR_CLOSE':([21,22,23,26,27,28,29,30,31,32,34,35,36,37,63,64,65,66,70,72,73,79,80,81,84,85,86,87,88,89,90,91,92,96,97,101,102,103,104,105,106,109,115,123,],[-39,-27,-19,-37,-15,-16,-17,-35,-32,-24,-67,66,-21,-18,93,-57,-58,-20,-21,-40,-67,-38,-25,-26,-36,-33,-34,-28,-29,-30,-31,-22,-23,111,-54,-9,-10,-11,-12,-13,-14,-59,-55,-56,]),'COMMA':([21,22,23,26,27,28,29,30,31,32,34,36,37,63,64,65,66,70,72,73,77,79,80,81,84,85,86,87,88,89,90,91,92,96,97,101,102,103,104,105,106,109,115,123,],[-39,-27,-19,-37,-15,-16,-17,-35,-32,-24,-67,-21,-18,94,-57,-58,-20,-21,-40,-67,99,-38,-25,-26,-36,-33,-34,-28,-29,-30,-31,-22,-23,112,-54,-9,-10,-11,-12,-13,-14,-59,-55,-56,]),'BOX_PAR_CLOSE':([21,22,23,26,27,28,29,30,31,32,36,37,66,70,72,79,80,81,84,85,86,87,88,89,90,91,92,114,],[-39,-27,-19,-37,-15,-16,-17,-35,-32,-24,-21,-18,-20,-21,-40,-38,-25,-26,-36,-33,-34,-28,-29,-30,-31,-22,-23,118,]),'ELSE':([38,68,76,],[-50,-51,98,]),'COLON':([52,53,95,117,118,],[82,83,110,120,121,]),'VOID':([82,83,110,116,120,],[101,101,101,101,101,]),'CHAR':([82,83,110,116,120,],[102,102,102,102,102,]),'INT':([82,83,110,116,120,],[103,103,103,103,103,]),'FLOAT':([82,83,110,116,120,],[104,104,104,104,104,]),'STRING':([82,83,110,116,120,],[105,105,105,105,105,]),'BOOL':([82,83,110,116,120,],[106,106,106,106,106,]),'ARROW':([111,],[116,]),'INC_OP':([121,],[124,]),'DEC_OP':([121,],[125,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,12,39,],[2,33,40,69,]),'function_call':([0,1,12,39,42,45,],[3,3,3,3,71,74,]),'compound_statement':([0,1,12,39,46,48,98,119,124,125,],[4,4,4,4,76,78,113,122,126,127,]),'assignment_statement':([0,1,12,39,],[5,5,5,5,]),'function_definition':([0,1,12,39,],[6,6,6,6,]),'declaration':([0,1,12,39,],[7,7,7,7,]),'selection_statement':([0,1,12,39,],[8,8,8,8,]),'iteration_statement':([0,1,12,39,],[9,9,9,9,]),'assignment_expression':([0,1,11,12,18,20,34,39,45,47,94,99,],[13,13,35,13,46,48,65,13,75,77,109,114,]),'primary_expression':([0,1,11,12,18,20,34,39,42,45,47,49,50,51,54,55,56,57,58,59,60,61,62,67,94,99,],[14,14,36,14,36,36,36,14,70,36,36,70,70,70,70,70,70,70,70,70,70,91,92,70,36,36,]),'init_declarator':([0,1,12,39,],[16,16,16,16,]),'declarator':([0,1,12,39,],[17,17,17,17,]),'or_expression':([0,1,11,12,18,20,34,39,45,47,94,99,],[21,21,21,21,21,21,21,21,21,21,21,21,]),'multiplicative_expression':([0,1,11,12,18,20,34,39,42,45,47,49,54,55,56,57,58,59,60,67,94,99,],[22,22,22,22,22,22,22,22,72,22,22,22,22,22,22,87,88,89,90,72,22,22,]),'literal':([0,1,11,12,18,20,34,39,42,45,47,49,50,51,54,55,56,57,58,59,60,61,62,67,94,99,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'and_expression':([0,1,11,12,18,20,34,39,45,47,49,94,99,],[26,26,26,26,26,26,26,26,26,26,79,26,26,]),'equality_expression':([0,1,11,12,18,20,34,39,45,47,49,54,94,99,],[30,30,30,30,30,30,30,30,30,30,30,84,30,30,]),'relational_expression':([0,1,11,12,18,20,34,39,45,47,49,54,55,56,94,99,],[31,31,31,31,31,31,31,31,31,31,31,31,85,86,31,31,]),'additive_expression':([0,1,11,12,18,20,34,39,42,45,47,49,50,51,54,55,56,57,58,59,60,67,94,99,],[32,32,32,32,32,32,32,32,32,32,32,32,80,81,32,32,32,32,32,32,32,32,32,32,]),'statement_list':([12,],[39,]),'parameter_list':([34,],[63,]),'empty':([34,73,],[64,97,]),'identifier_list':([73,],[96,]),'type_specifier':([82,83,110,116,120,],[100,107,115,119,123,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','syntactic.py',42),
  ('program -> program statement','program',2,'p_program','syntactic.py',43),
  ('declaration -> init_declarator SEMICOLON','declaration',2,'p_declaration','syntactic.py',52),
  ('declaration -> declarator EQUALS function_call','declaration',3,'p_declaration','syntactic.py',53),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','syntactic.py',60),
  ('init_declarator -> declarator EQUALS assignment_expression','init_declarator',3,'p_init_declarator','syntactic.py',61),
  ('declarator -> LET IDENTIFIER COLON type_specifier','declarator',4,'p_declarator','syntactic.py',68),
  ('declarator -> CONST IDENTIFIER COLON type_specifier','declarator',4,'p_declarator','syntactic.py',69),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','syntactic.py',83),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','syntactic.py',84),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','syntactic.py',85),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','syntactic.py',86),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','syntactic.py',87),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','syntactic.py',88),
  ('literal -> INT_LITERAL','literal',1,'p_literal','syntactic.py',96),
  ('literal -> FLOAT_LITERAL','literal',1,'p_literal','syntactic.py',97),
  ('literal -> STRING_LITERAL','literal',1,'p_literal','syntactic.py',98),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','syntactic.py',108),
  ('primary_expression -> literal','primary_expression',1,'p_primary_expression','syntactic.py',109),
  ('primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE','primary_expression',3,'p_primary_expression','syntactic.py',110),
  ('additive_expression -> primary_expression','additive_expression',1,'p_additive_expression','syntactic.py',125),
  ('additive_expression -> additive_expression PLUS primary_expression','additive_expression',3,'p_additive_expression','syntactic.py',126),
  ('additive_expression -> additive_expression MINUS primary_expression','additive_expression',3,'p_additive_expression','syntactic.py',127),
  ('multiplicative_expression -> additive_expression','multiplicative_expression',1,'p_multiplicative_expression','syntactic.py',148),
  ('multiplicative_expression -> multiplicative_expression MUL additive_expression','multiplicative_expression',3,'p_multiplicative_expression','syntactic.py',149),
  ('multiplicative_expression -> multiplicative_expression DIV additive_expression','multiplicative_expression',3,'p_multiplicative_expression','syntactic.py',150),
  ('relational_expression -> multiplicative_expression','relational_expression',1,'p_relational_expression','syntactic.py',170),
  ('relational_expression -> relational_expression LESS_OP multiplicative_expression','relational_expression',3,'p_relational_expression','syntactic.py',171),
  ('relational_expression -> relational_expression GREATER_OP multiplicative_expression','relational_expression',3,'p_relational_expression','syntactic.py',172),
  ('relational_expression -> relational_expression LE_OP multiplicative_expression','relational_expression',3,'p_relational_expression','syntactic.py',173),
  ('relational_expression -> relational_expression GE_OP multiplicative_expression','relational_expression',3,'p_relational_expression','syntactic.py',174),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','syntactic.py',184),
  ('equality_expression -> equality_expression EQ_OP relational_expression','equality_expression',3,'p_equality_expression','syntactic.py',185),
  ('equality_expression -> equality_expression NE_OP relational_expression','equality_expression',3,'p_equality_expression','syntactic.py',186),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','syntactic.py',197),
  ('and_expression -> and_expression AND_OP equality_expression','and_expression',3,'p_and_expression','syntactic.py',198),
  ('or_expression -> and_expression','or_expression',1,'p_or_expression','syntactic.py',209),
  ('or_expression -> or_expression OR_OP and_expression','or_expression',3,'p_or_expression','syntactic.py',210),
  ('assignment_expression -> or_expression','assignment_expression',1,'p_assignment_expression','syntactic.py',221),
  ('assignment_expression -> primary_expression EQUALS multiplicative_expression','assignment_expression',3,'p_assignment_expression','syntactic.py',222),
  ('statement -> function_call','statement',1,'p_statement','syntactic.py',235),
  ('statement -> compound_statement','statement',1,'p_statement','syntactic.py',236),
  ('statement -> assignment_statement','statement',1,'p_statement','syntactic.py',237),
  ('statement -> function_definition','statement',1,'p_statement','syntactic.py',238),
  ('statement -> declaration','statement',1,'p_statement','syntactic.py',239),
  ('statement -> selection_statement','statement',1,'p_statement','syntactic.py',240),
  ('statement -> iteration_statement','statement',1,'p_statement','syntactic.py',241),
  ('statement_list -> statement','statement_list',1,'p_statement_list','syntactic.py',248),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','syntactic.py',249),
  ('compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE','compound_statement',2,'p_compound_statement','syntactic.py',255),
  ('compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE','compound_statement',3,'p_compound_statement','syntactic.py',256),
  ('assignment_statement -> assignment_expression SEMICOLON','assignment_statement',2,'p_assignment_statement','syntactic.py',261),
  ('assignment_statement -> primary_expression EQUALS function_call','assignment_statement',3,'p_assignment_statement','syntactic.py',262),
  ('identifier_list -> empty','identifier_list',1,'p_identifier_list','syntactic.py',268),
  ('identifier_list -> IDENTIFIER COLON type_specifier','identifier_list',3,'p_identifier_list','syntactic.py',269),
  ('identifier_list -> identifier_list COMMA IDENTIFIER COLON type_specifier','identifier_list',5,'p_identifier_list','syntactic.py',270),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','syntactic.py',276),
  ('parameter_list -> assignment_expression','parameter_list',1,'p_parameter_list','syntactic.py',277),
  ('parameter_list -> parameter_list COMMA assignment_expression','parameter_list',3,'p_parameter_list','syntactic.py',278),
  ('function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement','function_definition',8,'p_function_definition','syntactic.py',286),
  ('function_call -> IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON','function_call',5,'p_function_call','syntactic.py',291),
  ('selection_statement -> IF assignment_expression compound_statement','selection_statement',3,'p_selection_statement','syntactic.py',299),
  ('selection_statement -> IF assignment_expression compound_statement ELSE compound_statement','selection_statement',5,'p_selection_statement','syntactic.py',300),
  ('iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement','iteration_statement',9,'p_iteration_statement','syntactic.py',308),
  ('iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement','iteration_statement',9,'p_iteration_statement','syntactic.py',309),
  ('iteration_statement -> WHILE assignment_expression compound_statement','iteration_statement',3,'p_iteration_statement','syntactic.py',310),
  ('empty -> <empty>','empty',0,'p_empty','syntactic.py',315),
]
