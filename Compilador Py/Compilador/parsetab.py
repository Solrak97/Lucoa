
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND_OP ARROW BOOL BOX_PAR_CLOSE BOX_PAR_OPEN CHAR COLON COMMA CONST CUR_PAR_CLOSE CUR_PAR_OPEN DEC_OP DIV ELSE EQUALS EQ_OP FLOAT FLOAT_LITERAL FUNC GE_OP IDENTIFIER IF INC_OP INT INT_LITERAL LET LE_OP MINUS MUL NE_OP OR_OP PLUS RND_PAR_CLOSE RND_PAR_OPEN SEMICOLON STRING STRING_LITERAL VOID\n    program : declaration\n        | program declaration\n    \n    declaration : init_declarator SEMICOLON \n    \n    init_declarator : declarator\n        | declarator EQUALS assignment_expression\n    \n    declarator : LET IDENTIFIER COLON type_specifier\n        | CONST IDENTIFIER COLON type_specifier\n    \n    type_specifier : VOID\n        | CHAR\n        | INT\n        | FLOAT\n        | STRING\n        | BOOL\n    \n    literal : INT_LITERAL\n        | FLOAT_LITERAL\n        | STRING_LITERAL\n    \n    primary_expression : IDENTIFIER\n        | literal\n    \n    additive_expression : primary_expression          \n        | additive_expression PLUS primary_expression\n        | additive_expression MINUS primary_expression\n    \n    multiplicative_expression : additive_expression\n        | multiplicative_expression MUL additive_expression\n        | multiplicative_expression DIV additive_expression\n    \n    assignment_expression : multiplicative_expression\n        | primary_expression EQUALS multiplicative_expression\n    '
    
_lr_action_items = {'LET':([0,1,2,7,8,],[5,5,-1,-2,-3,]),'CONST':([0,1,2,7,8,],[6,6,-1,-2,-3,]),'$end':([1,2,7,8,],[0,-1,-2,-3,]),'SEMICOLON':([3,4,12,13,14,15,16,17,18,19,20,28,29,30,31,32,33,34,35,36,37,38,39,40,41,],[8,-4,-5,-25,-19,-22,-17,-18,-14,-15,-16,-6,-8,-9,-10,-11,-12,-13,-7,-23,-19,-24,-26,-20,-21,]),'EQUALS':([4,14,16,17,18,19,20,28,29,30,31,32,33,34,35,],[9,25,-17,-18,-14,-15,-16,-6,-8,-9,-10,-11,-12,-13,-7,]),'IDENTIFIER':([5,6,9,23,24,25,26,27,],[10,11,16,16,16,16,16,16,]),'INT_LITERAL':([9,23,24,25,26,27,],[18,18,18,18,18,18,]),'FLOAT_LITERAL':([9,23,24,25,26,27,],[19,19,19,19,19,19,]),'STRING_LITERAL':([9,23,24,25,26,27,],[20,20,20,20,20,20,]),'COLON':([10,11,],[21,22,]),'MUL':([13,14,15,16,17,18,19,20,36,37,38,39,40,41,],[23,-19,-22,-17,-18,-14,-15,-16,-23,-19,-24,23,-20,-21,]),'DIV':([13,14,15,16,17,18,19,20,36,37,38,39,40,41,],[24,-19,-22,-17,-18,-14,-15,-16,-23,-19,-24,24,-20,-21,]),'PLUS':([14,15,16,17,18,19,20,36,37,38,40,41,],[-19,26,-17,-18,-14,-15,-16,26,-19,26,-20,-21,]),'MINUS':([14,15,16,17,18,19,20,36,37,38,40,41,],[-19,27,-17,-18,-14,-15,-16,27,-19,27,-20,-21,]),'VOID':([21,22,],[29,29,]),'CHAR':([21,22,],[30,30,]),'INT':([21,22,],[31,31,]),'FLOAT':([21,22,],[32,32,]),'STRING':([21,22,],[33,33,]),'BOOL':([21,22,],[34,34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration':([0,1,],[2,7,]),'init_declarator':([0,1,],[3,3,]),'declarator':([0,1,],[4,4,]),'assignment_expression':([9,],[12,]),'multiplicative_expression':([9,25,],[13,39,]),'primary_expression':([9,23,24,25,26,27,],[14,37,37,37,40,41,]),'additive_expression':([9,23,24,25,],[15,36,38,15,]),'literal':([9,23,24,25,26,27,],[17,17,17,17,17,17,]),'type_specifier':([21,22,],[28,35,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration','program',1,'p_program','syntactic.py',13),
  ('program -> program declaration','program',2,'p_program','syntactic.py',14),
  ('declaration -> init_declarator SEMICOLON','declaration',2,'p_declaration','syntactic.py',20),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','syntactic.py',28),
  ('init_declarator -> declarator EQUALS assignment_expression','init_declarator',3,'p_init_declarator','syntactic.py',29),
  ('declarator -> LET IDENTIFIER COLON type_specifier','declarator',4,'p_declarator','syntactic.py',36),
  ('declarator -> CONST IDENTIFIER COLON type_specifier','declarator',4,'p_declarator','syntactic.py',37),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','syntactic.py',44),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','syntactic.py',45),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','syntactic.py',46),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','syntactic.py',47),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','syntactic.py',48),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','syntactic.py',49),
  ('literal -> INT_LITERAL','literal',1,'p_literal','syntactic.py',57),
  ('literal -> FLOAT_LITERAL','literal',1,'p_literal','syntactic.py',58),
  ('literal -> STRING_LITERAL','literal',1,'p_literal','syntactic.py',59),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','syntactic.py',67),
  ('primary_expression -> literal','primary_expression',1,'p_primary_expression','syntactic.py',68),
  ('additive_expression -> primary_expression','additive_expression',1,'p_additive_expression','syntactic.py',77),
  ('additive_expression -> additive_expression PLUS primary_expression','additive_expression',3,'p_additive_expression','syntactic.py',78),
  ('additive_expression -> additive_expression MINUS primary_expression','additive_expression',3,'p_additive_expression','syntactic.py',79),
  ('multiplicative_expression -> additive_expression','multiplicative_expression',1,'p_multiplicative_expression','syntactic.py',94),
  ('multiplicative_expression -> multiplicative_expression MUL additive_expression','multiplicative_expression',3,'p_multiplicative_expression','syntactic.py',95),
  ('multiplicative_expression -> multiplicative_expression DIV additive_expression','multiplicative_expression',3,'p_multiplicative_expression','syntactic.py',96),
  ('assignment_expression -> multiplicative_expression','assignment_expression',1,'p_assigment_expression','syntactic.py',112),
  ('assignment_expression -> primary_expression EQUALS multiplicative_expression','assignment_expression',3,'p_assigment_expression','syntactic.py',113),
]
