Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> program statement
Rule 3     declaration -> init_declarator SEMICOLON
Rule 4     declaration -> declarator EQUALS function_call
Rule 5     init_declarator -> declarator
Rule 6     init_declarator -> declarator EQUALS assignment_expression
Rule 7     declarator -> LET IDENTIFIER COLON type_specifier
Rule 8     declarator -> CONST IDENTIFIER COLON type_specifier
Rule 9     type_specifier -> VOID
Rule 10    type_specifier -> CHAR
Rule 11    type_specifier -> INT
Rule 12    type_specifier -> FLOAT
Rule 13    type_specifier -> STRING
Rule 14    type_specifier -> BOOL
Rule 15    literal -> INT_LITERAL
Rule 16    literal -> FLOAT_LITERAL
Rule 17    literal -> STRING_LITERAL
Rule 18    primary_expression -> IDENTIFIER
Rule 19    primary_expression -> literal
Rule 20    primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
Rule 21    additive_expression -> primary_expression
Rule 22    additive_expression -> additive_expression PLUS primary_expression
Rule 23    additive_expression -> additive_expression MINUS primary_expression
Rule 24    multiplicative_expression -> additive_expression
Rule 25    multiplicative_expression -> multiplicative_expression MUL additive_expression
Rule 26    multiplicative_expression -> multiplicative_expression DIV additive_expression
Rule 27    relational_expression -> multiplicative_expression
Rule 28    relational_expression -> relational_expression LESS_OP multiplicative_expression
Rule 29    relational_expression -> relational_expression GREATER_OP multiplicative_expression
Rule 30    relational_expression -> relational_expression LE_OP multiplicative_expression
Rule 31    relational_expression -> relational_expression GE_OP multiplicative_expression
Rule 32    equality_expression -> relational_expression
Rule 33    equality_expression -> equality_expression EQ_OP relational_expression
Rule 34    equality_expression -> equality_expression NE_OP relational_expression
Rule 35    and_expression -> equality_expression
Rule 36    and_expression -> and_expression AND_OP equality_expression
Rule 37    or_expression -> and_expression
Rule 38    or_expression -> or_expression OR_OP and_expression
Rule 39    assignment_expression -> or_expression
Rule 40    assignment_expression -> primary_expression EQUALS multiplicative_expression
Rule 41    statement -> function_call
Rule 42    statement -> compound_statement
Rule 43    statement -> assignment_statement
Rule 44    statement -> function_definition
Rule 45    statement -> declaration
Rule 46    statement -> selection_statement
Rule 47    statement -> iteration_statement
Rule 48    statement_list -> statement
Rule 49    statement_list -> statement_list statement
Rule 50    compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE
Rule 51    compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE
Rule 52    assignment_statement -> assignment_expression SEMICOLON
Rule 53    assignment_statement -> primary_expression EQUALS function_call
Rule 54    identifier_list -> empty
Rule 55    identifier_list -> IDENTIFIER COLON type_specifier
Rule 56    identifier_list -> identifier_list COMMA IDENTIFIER COLON type_specifier
Rule 57    parameter_list -> empty
Rule 58    parameter_list -> assignment_expression
Rule 59    parameter_list -> parameter_list COMMA assignment_expression
Rule 60    function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement
Rule 61    function_call -> IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON
Rule 62    selection_statement -> IF assignment_expression compound_statement
Rule 63    selection_statement -> IF assignment_expression compound_statement ELSE compound_statement
Rule 64    iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement
Rule 65    iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement
Rule 66    iteration_statement -> WHILE assignment_expression compound_statement
Rule 67    empty -> <empty>

Terminals, with rules where they appear

AND_OP               : 36
ARROW                : 60
BOOL                 : 14
BOX_PAR_CLOSE        : 64 65
BOX_PAR_OPEN         : 64 65
CHAR                 : 10
COLON                : 7 8 55 56 64 65
COMMA                : 56 59 64 65
CONST                : 8
CUR_PAR_CLOSE        : 50 51
CUR_PAR_OPEN         : 50 51
DEC_OP               : 65
DIV                  : 26
ELSE                 : 63
EQUALS               : 4 6 40 53
EQ_OP                : 33
FLOAT                : 12
FLOAT_LITERAL        : 16
FROM                 : 64 65
FUNC                 : 60
GE_OP                : 31
GREATER_OP           : 29
IDENTIFIER           : 7 8 18 55 56 60 61
IF                   : 62 63
INC_OP               : 64
INT                  : 11
INT_LITERAL          : 15
LESS_OP              : 28
LET                  : 7
LE_OP                : 30
MINUS                : 23
MUL                  : 25
NE_OP                : 34
OR_OP                : 38
PLUS                 : 22
RND_PAR_CLOSE        : 20 60 61
RND_PAR_OPEN         : 20 60 61
SEMICOLON            : 3 52 61
STRING               : 13
STRING_LITERAL       : 17
VOID                 : 9
WHILE                : 66
error                : 

Nonterminals, with rules where they appear

additive_expression  : 22 23 24 25 26
and_expression       : 36 37 38
assignment_expression : 6 20 52 58 59 62 63 64 64 65 65 66
assignment_statement : 43
compound_statement   : 42 60 62 63 63 64 65 66
declaration          : 45
declarator           : 4 5 6
empty                : 54 57
equality_expression  : 33 34 35 36
function_call        : 4 41 53
function_definition  : 44
identifier_list      : 56 60
init_declarator      : 3
iteration_statement  : 47
literal              : 19
multiplicative_expression : 25 26 27 28 29 30 31 40
or_expression        : 38 39
parameter_list       : 59 61
primary_expression   : 21 22 23 40 53
program              : 2 0
relational_expression : 28 29 30 31 32 33 34
selection_statement  : 46
statement            : 1 2 48 49
statement_list       : 49 51
type_specifier       : 7 8 55 56 60

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . program statement
    (41) statement -> . function_call
    (42) statement -> . compound_statement
    (43) statement -> . assignment_statement
    (44) statement -> . function_definition
    (45) statement -> . declaration
    (46) statement -> . selection_statement
    (47) statement -> . iteration_statement
    (61) function_call -> . IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON
    (50) compound_statement -> . CUR_PAR_OPEN CUR_PAR_CLOSE
    (51) compound_statement -> . CUR_PAR_OPEN statement_list CUR_PAR_CLOSE
    (52) assignment_statement -> . assignment_expression SEMICOLON
    (53) assignment_statement -> . primary_expression EQUALS function_call
    (60) function_definition -> . FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement
    (3) declaration -> . init_declarator SEMICOLON
    (4) declaration -> . declarator EQUALS function_call
    (62) selection_statement -> . IF assignment_expression compound_statement
    (63) selection_statement -> . IF assignment_expression compound_statement ELSE compound_statement
    (64) iteration_statement -> . FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement
    (65) iteration_statement -> . FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement
    (66) iteration_statement -> . WHILE assignment_expression compound_statement
    (39) assignment_expression -> . or_expression
    (40) assignment_expression -> . primary_expression EQUALS multiplicative_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (5) init_declarator -> . declarator
    (6) init_declarator -> . declarator EQUALS assignment_expression
    (7) declarator -> . LET IDENTIFIER COLON type_specifier
    (8) declarator -> . CONST IDENTIFIER COLON type_specifier
    (37) or_expression -> . and_expression
    (38) or_expression -> . or_expression OR_OP and_expression
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_OP equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (27) relational_expression -> . multiplicative_expression
    (28) relational_expression -> . relational_expression LESS_OP multiplicative_expression
    (29) relational_expression -> . relational_expression GREATER_OP multiplicative_expression
    (30) relational_expression -> . relational_expression LE_OP multiplicative_expression
    (31) relational_expression -> . relational_expression GE_OP multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression

    IDENTIFIER      shift and go to state 10
    CUR_PAR_OPEN    shift and go to state 12
    FUNC            shift and go to state 15
    IF              shift and go to state 18
    FROM            shift and go to state 19
    WHILE           shift and go to state 20
    RND_PAR_OPEN    shift and go to state 11
    LET             shift and go to state 24
    CONST           shift and go to state 25
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    program                        shift and go to state 1
    statement                      shift and go to state 2
    function_call                  shift and go to state 3
    compound_statement             shift and go to state 4
    assignment_statement           shift and go to state 5
    function_definition            shift and go to state 6
    declaration                    shift and go to state 7
    selection_statement            shift and go to state 8
    iteration_statement            shift and go to state 9
    assignment_expression          shift and go to state 13
    primary_expression             shift and go to state 14
    init_declarator                shift and go to state 16
    declarator                     shift and go to state 17
    or_expression                  shift and go to state 21
    multiplicative_expression      shift and go to state 22
    literal                        shift and go to state 23
    and_expression                 shift and go to state 26
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32

state 1

    (0) S' -> program .
    (2) program -> program . statement
    (41) statement -> . function_call
    (42) statement -> . compound_statement
    (43) statement -> . assignment_statement
    (44) statement -> . function_definition
    (45) statement -> . declaration
    (46) statement -> . selection_statement
    (47) statement -> . iteration_statement
    (61) function_call -> . IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON
    (50) compound_statement -> . CUR_PAR_OPEN CUR_PAR_CLOSE
    (51) compound_statement -> . CUR_PAR_OPEN statement_list CUR_PAR_CLOSE
    (52) assignment_statement -> . assignment_expression SEMICOLON
    (53) assignment_statement -> . primary_expression EQUALS function_call
    (60) function_definition -> . FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement
    (3) declaration -> . init_declarator SEMICOLON
    (4) declaration -> . declarator EQUALS function_call
    (62) selection_statement -> . IF assignment_expression compound_statement
    (63) selection_statement -> . IF assignment_expression compound_statement ELSE compound_statement
    (64) iteration_statement -> . FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement
    (65) iteration_statement -> . FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement
    (66) iteration_statement -> . WHILE assignment_expression compound_statement
    (39) assignment_expression -> . or_expression
    (40) assignment_expression -> . primary_expression EQUALS multiplicative_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (5) init_declarator -> . declarator
    (6) init_declarator -> . declarator EQUALS assignment_expression
    (7) declarator -> . LET IDENTIFIER COLON type_specifier
    (8) declarator -> . CONST IDENTIFIER COLON type_specifier
    (37) or_expression -> . and_expression
    (38) or_expression -> . or_expression OR_OP and_expression
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_OP equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (27) relational_expression -> . multiplicative_expression
    (28) relational_expression -> . relational_expression LESS_OP multiplicative_expression
    (29) relational_expression -> . relational_expression GREATER_OP multiplicative_expression
    (30) relational_expression -> . relational_expression LE_OP multiplicative_expression
    (31) relational_expression -> . relational_expression GE_OP multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression

    IDENTIFIER      shift and go to state 10
    CUR_PAR_OPEN    shift and go to state 12
    FUNC            shift and go to state 15
    IF              shift and go to state 18
    FROM            shift and go to state 19
    WHILE           shift and go to state 20
    RND_PAR_OPEN    shift and go to state 11
    LET             shift and go to state 24
    CONST           shift and go to state 25
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    statement                      shift and go to state 33
    function_call                  shift and go to state 3
    compound_statement             shift and go to state 4
    assignment_statement           shift and go to state 5
    function_definition            shift and go to state 6
    declaration                    shift and go to state 7
    selection_statement            shift and go to state 8
    iteration_statement            shift and go to state 9
    assignment_expression          shift and go to state 13
    primary_expression             shift and go to state 14
    init_declarator                shift and go to state 16
    declarator                     shift and go to state 17
    or_expression                  shift and go to state 21
    multiplicative_expression      shift and go to state 22
    literal                        shift and go to state 23
    and_expression                 shift and go to state 26
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32

state 2

    (1) program -> statement .

    IDENTIFIER      reduce using rule 1 (program -> statement .)
    CUR_PAR_OPEN    reduce using rule 1 (program -> statement .)
    FUNC            reduce using rule 1 (program -> statement .)
    IF              reduce using rule 1 (program -> statement .)
    FROM            reduce using rule 1 (program -> statement .)
    WHILE           reduce using rule 1 (program -> statement .)
    RND_PAR_OPEN    reduce using rule 1 (program -> statement .)
    LET             reduce using rule 1 (program -> statement .)
    CONST           reduce using rule 1 (program -> statement .)
    INT_LITERAL     reduce using rule 1 (program -> statement .)
    FLOAT_LITERAL   reduce using rule 1 (program -> statement .)
    STRING_LITERAL  reduce using rule 1 (program -> statement .)
    $end            reduce using rule 1 (program -> statement .)


state 3

    (41) statement -> function_call .

    IDENTIFIER      reduce using rule 41 (statement -> function_call .)
    CUR_PAR_OPEN    reduce using rule 41 (statement -> function_call .)
    FUNC            reduce using rule 41 (statement -> function_call .)
    IF              reduce using rule 41 (statement -> function_call .)
    FROM            reduce using rule 41 (statement -> function_call .)
    WHILE           reduce using rule 41 (statement -> function_call .)
    RND_PAR_OPEN    reduce using rule 41 (statement -> function_call .)
    LET             reduce using rule 41 (statement -> function_call .)
    CONST           reduce using rule 41 (statement -> function_call .)
    INT_LITERAL     reduce using rule 41 (statement -> function_call .)
    FLOAT_LITERAL   reduce using rule 41 (statement -> function_call .)
    STRING_LITERAL  reduce using rule 41 (statement -> function_call .)
    $end            reduce using rule 41 (statement -> function_call .)
    CUR_PAR_CLOSE   reduce using rule 41 (statement -> function_call .)


state 4

    (42) statement -> compound_statement .

    IDENTIFIER      reduce using rule 42 (statement -> compound_statement .)
    CUR_PAR_OPEN    reduce using rule 42 (statement -> compound_statement .)
    FUNC            reduce using rule 42 (statement -> compound_statement .)
    IF              reduce using rule 42 (statement -> compound_statement .)
    FROM            reduce using rule 42 (statement -> compound_statement .)
    WHILE           reduce using rule 42 (statement -> compound_statement .)
    RND_PAR_OPEN    reduce using rule 42 (statement -> compound_statement .)
    LET             reduce using rule 42 (statement -> compound_statement .)
    CONST           reduce using rule 42 (statement -> compound_statement .)
    INT_LITERAL     reduce using rule 42 (statement -> compound_statement .)
    FLOAT_LITERAL   reduce using rule 42 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 42 (statement -> compound_statement .)
    $end            reduce using rule 42 (statement -> compound_statement .)
    CUR_PAR_CLOSE   reduce using rule 42 (statement -> compound_statement .)


state 5

    (43) statement -> assignment_statement .

    IDENTIFIER      reduce using rule 43 (statement -> assignment_statement .)
    CUR_PAR_OPEN    reduce using rule 43 (statement -> assignment_statement .)
    FUNC            reduce using rule 43 (statement -> assignment_statement .)
    IF              reduce using rule 43 (statement -> assignment_statement .)
    FROM            reduce using rule 43 (statement -> assignment_statement .)
    WHILE           reduce using rule 43 (statement -> assignment_statement .)
    RND_PAR_OPEN    reduce using rule 43 (statement -> assignment_statement .)
    LET             reduce using rule 43 (statement -> assignment_statement .)
    CONST           reduce using rule 43 (statement -> assignment_statement .)
    INT_LITERAL     reduce using rule 43 (statement -> assignment_statement .)
    FLOAT_LITERAL   reduce using rule 43 (statement -> assignment_statement .)
    STRING_LITERAL  reduce using rule 43 (statement -> assignment_statement .)
    $end            reduce using rule 43 (statement -> assignment_statement .)
    CUR_PAR_CLOSE   reduce using rule 43 (statement -> assignment_statement .)


state 6

    (44) statement -> function_definition .

    IDENTIFIER      reduce using rule 44 (statement -> function_definition .)
    CUR_PAR_OPEN    reduce using rule 44 (statement -> function_definition .)
    FUNC            reduce using rule 44 (statement -> function_definition .)
    IF              reduce using rule 44 (statement -> function_definition .)
    FROM            reduce using rule 44 (statement -> function_definition .)
    WHILE           reduce using rule 44 (statement -> function_definition .)
    RND_PAR_OPEN    reduce using rule 44 (statement -> function_definition .)
    LET             reduce using rule 44 (statement -> function_definition .)
    CONST           reduce using rule 44 (statement -> function_definition .)
    INT_LITERAL     reduce using rule 44 (statement -> function_definition .)
    FLOAT_LITERAL   reduce using rule 44 (statement -> function_definition .)
    STRING_LITERAL  reduce using rule 44 (statement -> function_definition .)
    $end            reduce using rule 44 (statement -> function_definition .)
    CUR_PAR_CLOSE   reduce using rule 44 (statement -> function_definition .)


state 7

    (45) statement -> declaration .

    IDENTIFIER      reduce using rule 45 (statement -> declaration .)
    CUR_PAR_OPEN    reduce using rule 45 (statement -> declaration .)
    FUNC            reduce using rule 45 (statement -> declaration .)
    IF              reduce using rule 45 (statement -> declaration .)
    FROM            reduce using rule 45 (statement -> declaration .)
    WHILE           reduce using rule 45 (statement -> declaration .)
    RND_PAR_OPEN    reduce using rule 45 (statement -> declaration .)
    LET             reduce using rule 45 (statement -> declaration .)
    CONST           reduce using rule 45 (statement -> declaration .)
    INT_LITERAL     reduce using rule 45 (statement -> declaration .)
    FLOAT_LITERAL   reduce using rule 45 (statement -> declaration .)
    STRING_LITERAL  reduce using rule 45 (statement -> declaration .)
    $end            reduce using rule 45 (statement -> declaration .)
    CUR_PAR_CLOSE   reduce using rule 45 (statement -> declaration .)


state 8

    (46) statement -> selection_statement .

    IDENTIFIER      reduce using rule 46 (statement -> selection_statement .)
    CUR_PAR_OPEN    reduce using rule 46 (statement -> selection_statement .)
    FUNC            reduce using rule 46 (statement -> selection_statement .)
    IF              reduce using rule 46 (statement -> selection_statement .)
    FROM            reduce using rule 46 (statement -> selection_statement .)
    WHILE           reduce using rule 46 (statement -> selection_statement .)
    RND_PAR_OPEN    reduce using rule 46 (statement -> selection_statement .)
    LET             reduce using rule 46 (statement -> selection_statement .)
    CONST           reduce using rule 46 (statement -> selection_statement .)
    INT_LITERAL     reduce using rule 46 (statement -> selection_statement .)
    FLOAT_LITERAL   reduce using rule 46 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 46 (statement -> selection_statement .)
    $end            reduce using rule 46 (statement -> selection_statement .)
    CUR_PAR_CLOSE   reduce using rule 46 (statement -> selection_statement .)


state 9

    (47) statement -> iteration_statement .

    IDENTIFIER      reduce using rule 47 (statement -> iteration_statement .)
    CUR_PAR_OPEN    reduce using rule 47 (statement -> iteration_statement .)
    FUNC            reduce using rule 47 (statement -> iteration_statement .)
    IF              reduce using rule 47 (statement -> iteration_statement .)
    FROM            reduce using rule 47 (statement -> iteration_statement .)
    WHILE           reduce using rule 47 (statement -> iteration_statement .)
    RND_PAR_OPEN    reduce using rule 47 (statement -> iteration_statement .)
    LET             reduce using rule 47 (statement -> iteration_statement .)
    CONST           reduce using rule 47 (statement -> iteration_statement .)
    INT_LITERAL     reduce using rule 47 (statement -> iteration_statement .)
    FLOAT_LITERAL   reduce using rule 47 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 47 (statement -> iteration_statement .)
    $end            reduce using rule 47 (statement -> iteration_statement .)
    CUR_PAR_CLOSE   reduce using rule 47 (statement -> iteration_statement .)


state 10

    (61) function_call -> IDENTIFIER . RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON
    (18) primary_expression -> IDENTIFIER .

    RND_PAR_OPEN    shift and go to state 34
    EQUALS          reduce using rule 18 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 18 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    MUL             reduce using rule 18 (primary_expression -> IDENTIFIER .)
    DIV             reduce using rule 18 (primary_expression -> IDENTIFIER .)
    LESS_OP         reduce using rule 18 (primary_expression -> IDENTIFIER .)
    GREATER_OP      reduce using rule 18 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 18 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 18 (primary_expression -> IDENTIFIER .)


state 11

    (20) primary_expression -> RND_PAR_OPEN . assignment_expression RND_PAR_CLOSE
    (39) assignment_expression -> . or_expression
    (40) assignment_expression -> . primary_expression EQUALS multiplicative_expression
    (37) or_expression -> . and_expression
    (38) or_expression -> . or_expression OR_OP and_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_OP equality_expression
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (27) relational_expression -> . multiplicative_expression
    (28) relational_expression -> . relational_expression LESS_OP multiplicative_expression
    (29) relational_expression -> . relational_expression GREATER_OP multiplicative_expression
    (30) relational_expression -> . relational_expression LE_OP multiplicative_expression
    (31) relational_expression -> . relational_expression GE_OP multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    assignment_expression          shift and go to state 35
    or_expression                  shift and go to state 21
    primary_expression             shift and go to state 36
    multiplicative_expression      shift and go to state 22
    and_expression                 shift and go to state 26
    literal                        shift and go to state 23
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32

state 12

    (50) compound_statement -> CUR_PAR_OPEN . CUR_PAR_CLOSE
    (51) compound_statement -> CUR_PAR_OPEN . statement_list CUR_PAR_CLOSE
    (48) statement_list -> . statement
    (49) statement_list -> . statement_list statement
    (41) statement -> . function_call
    (42) statement -> . compound_statement
    (43) statement -> . assignment_statement
    (44) statement -> . function_definition
    (45) statement -> . declaration
    (46) statement -> . selection_statement
    (47) statement -> . iteration_statement
    (61) function_call -> . IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON
    (50) compound_statement -> . CUR_PAR_OPEN CUR_PAR_CLOSE
    (51) compound_statement -> . CUR_PAR_OPEN statement_list CUR_PAR_CLOSE
    (52) assignment_statement -> . assignment_expression SEMICOLON
    (53) assignment_statement -> . primary_expression EQUALS function_call
    (60) function_definition -> . FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement
    (3) declaration -> . init_declarator SEMICOLON
    (4) declaration -> . declarator EQUALS function_call
    (62) selection_statement -> . IF assignment_expression compound_statement
    (63) selection_statement -> . IF assignment_expression compound_statement ELSE compound_statement
    (64) iteration_statement -> . FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement
    (65) iteration_statement -> . FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement
    (66) iteration_statement -> . WHILE assignment_expression compound_statement
    (39) assignment_expression -> . or_expression
    (40) assignment_expression -> . primary_expression EQUALS multiplicative_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (5) init_declarator -> . declarator
    (6) init_declarator -> . declarator EQUALS assignment_expression
    (7) declarator -> . LET IDENTIFIER COLON type_specifier
    (8) declarator -> . CONST IDENTIFIER COLON type_specifier
    (37) or_expression -> . and_expression
    (38) or_expression -> . or_expression OR_OP and_expression
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_OP equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (27) relational_expression -> . multiplicative_expression
    (28) relational_expression -> . relational_expression LESS_OP multiplicative_expression
    (29) relational_expression -> . relational_expression GREATER_OP multiplicative_expression
    (30) relational_expression -> . relational_expression LE_OP multiplicative_expression
    (31) relational_expression -> . relational_expression GE_OP multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression

    CUR_PAR_CLOSE   shift and go to state 38
    IDENTIFIER      shift and go to state 10
    CUR_PAR_OPEN    shift and go to state 12
    FUNC            shift and go to state 15
    IF              shift and go to state 18
    FROM            shift and go to state 19
    WHILE           shift and go to state 20
    RND_PAR_OPEN    shift and go to state 11
    LET             shift and go to state 24
    CONST           shift and go to state 25
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    statement_list                 shift and go to state 39
    statement                      shift and go to state 40
    function_call                  shift and go to state 3
    compound_statement             shift and go to state 4
    assignment_statement           shift and go to state 5
    function_definition            shift and go to state 6
    declaration                    shift and go to state 7
    selection_statement            shift and go to state 8
    iteration_statement            shift and go to state 9
    assignment_expression          shift and go to state 13
    primary_expression             shift and go to state 14
    init_declarator                shift and go to state 16
    declarator                     shift and go to state 17
    or_expression                  shift and go to state 21
    multiplicative_expression      shift and go to state 22
    literal                        shift and go to state 23
    and_expression                 shift and go to state 26
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32

state 13

    (52) assignment_statement -> assignment_expression . SEMICOLON

    SEMICOLON       shift and go to state 41


state 14

    (53) assignment_statement -> primary_expression . EQUALS function_call
    (40) assignment_expression -> primary_expression . EQUALS multiplicative_expression
    (21) additive_expression -> primary_expression .

    EQUALS          shift and go to state 42
    PLUS            reduce using rule 21 (additive_expression -> primary_expression .)
    MINUS           reduce using rule 21 (additive_expression -> primary_expression .)
    MUL             reduce using rule 21 (additive_expression -> primary_expression .)
    DIV             reduce using rule 21 (additive_expression -> primary_expression .)
    LESS_OP         reduce using rule 21 (additive_expression -> primary_expression .)
    GREATER_OP      reduce using rule 21 (additive_expression -> primary_expression .)
    LE_OP           reduce using rule 21 (additive_expression -> primary_expression .)
    GE_OP           reduce using rule 21 (additive_expression -> primary_expression .)
    EQ_OP           reduce using rule 21 (additive_expression -> primary_expression .)
    NE_OP           reduce using rule 21 (additive_expression -> primary_expression .)
    AND_OP          reduce using rule 21 (additive_expression -> primary_expression .)
    OR_OP           reduce using rule 21 (additive_expression -> primary_expression .)
    SEMICOLON       reduce using rule 21 (additive_expression -> primary_expression .)


state 15

    (60) function_definition -> FUNC . IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement

    IDENTIFIER      shift and go to state 43


state 16

    (3) declaration -> init_declarator . SEMICOLON

    SEMICOLON       shift and go to state 44


state 17

    (4) declaration -> declarator . EQUALS function_call
    (5) init_declarator -> declarator .
    (6) init_declarator -> declarator . EQUALS assignment_expression

    EQUALS          shift and go to state 45
    SEMICOLON       reduce using rule 5 (init_declarator -> declarator .)


state 18

    (62) selection_statement -> IF . assignment_expression compound_statement
    (63) selection_statement -> IF . assignment_expression compound_statement ELSE compound_statement
    (39) assignment_expression -> . or_expression
    (40) assignment_expression -> . primary_expression EQUALS multiplicative_expression
    (37) or_expression -> . and_expression
    (38) or_expression -> . or_expression OR_OP and_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_OP equality_expression
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (27) relational_expression -> . multiplicative_expression
    (28) relational_expression -> . relational_expression LESS_OP multiplicative_expression
    (29) relational_expression -> . relational_expression GREATER_OP multiplicative_expression
    (30) relational_expression -> . relational_expression LE_OP multiplicative_expression
    (31) relational_expression -> . relational_expression GE_OP multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    assignment_expression          shift and go to state 46
    or_expression                  shift and go to state 21
    primary_expression             shift and go to state 36
    multiplicative_expression      shift and go to state 22
    and_expression                 shift and go to state 26
    literal                        shift and go to state 23
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32

state 19

    (64) iteration_statement -> FROM . BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement
    (65) iteration_statement -> FROM . BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement

    BOX_PAR_OPEN    shift and go to state 47


state 20

    (66) iteration_statement -> WHILE . assignment_expression compound_statement
    (39) assignment_expression -> . or_expression
    (40) assignment_expression -> . primary_expression EQUALS multiplicative_expression
    (37) or_expression -> . and_expression
    (38) or_expression -> . or_expression OR_OP and_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_OP equality_expression
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (27) relational_expression -> . multiplicative_expression
    (28) relational_expression -> . relational_expression LESS_OP multiplicative_expression
    (29) relational_expression -> . relational_expression GREATER_OP multiplicative_expression
    (30) relational_expression -> . relational_expression LE_OP multiplicative_expression
    (31) relational_expression -> . relational_expression GE_OP multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    assignment_expression          shift and go to state 48
    or_expression                  shift and go to state 21
    primary_expression             shift and go to state 36
    multiplicative_expression      shift and go to state 22
    and_expression                 shift and go to state 26
    literal                        shift and go to state 23
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32

state 21

    (39) assignment_expression -> or_expression .
    (38) or_expression -> or_expression . OR_OP and_expression

    SEMICOLON       reduce using rule 39 (assignment_expression -> or_expression .)
    RND_PAR_CLOSE   reduce using rule 39 (assignment_expression -> or_expression .)
    CUR_PAR_OPEN    reduce using rule 39 (assignment_expression -> or_expression .)
    COMMA           reduce using rule 39 (assignment_expression -> or_expression .)
    BOX_PAR_CLOSE   reduce using rule 39 (assignment_expression -> or_expression .)
    OR_OP           shift and go to state 49


state 22

    (27) relational_expression -> multiplicative_expression .
    (25) multiplicative_expression -> multiplicative_expression . MUL additive_expression
    (26) multiplicative_expression -> multiplicative_expression . DIV additive_expression

    LESS_OP         reduce using rule 27 (relational_expression -> multiplicative_expression .)
    GREATER_OP      reduce using rule 27 (relational_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 27 (relational_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 27 (relational_expression -> multiplicative_expression .)
    EQ_OP           reduce using rule 27 (relational_expression -> multiplicative_expression .)
    NE_OP           reduce using rule 27 (relational_expression -> multiplicative_expression .)
    AND_OP          reduce using rule 27 (relational_expression -> multiplicative_expression .)
    OR_OP           reduce using rule 27 (relational_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 27 (relational_expression -> multiplicative_expression .)
    RND_PAR_CLOSE   reduce using rule 27 (relational_expression -> multiplicative_expression .)
    CUR_PAR_OPEN    reduce using rule 27 (relational_expression -> multiplicative_expression .)
    COMMA           reduce using rule 27 (relational_expression -> multiplicative_expression .)
    BOX_PAR_CLOSE   reduce using rule 27 (relational_expression -> multiplicative_expression .)
    MUL             shift and go to state 50
    DIV             shift and go to state 51


state 23

    (19) primary_expression -> literal .

    EQUALS          reduce using rule 19 (primary_expression -> literal .)
    PLUS            reduce using rule 19 (primary_expression -> literal .)
    MINUS           reduce using rule 19 (primary_expression -> literal .)
    MUL             reduce using rule 19 (primary_expression -> literal .)
    DIV             reduce using rule 19 (primary_expression -> literal .)
    LESS_OP         reduce using rule 19 (primary_expression -> literal .)
    GREATER_OP      reduce using rule 19 (primary_expression -> literal .)
    LE_OP           reduce using rule 19 (primary_expression -> literal .)
    GE_OP           reduce using rule 19 (primary_expression -> literal .)
    EQ_OP           reduce using rule 19 (primary_expression -> literal .)
    NE_OP           reduce using rule 19 (primary_expression -> literal .)
    AND_OP          reduce using rule 19 (primary_expression -> literal .)
    OR_OP           reduce using rule 19 (primary_expression -> literal .)
    SEMICOLON       reduce using rule 19 (primary_expression -> literal .)
    RND_PAR_CLOSE   reduce using rule 19 (primary_expression -> literal .)
    CUR_PAR_OPEN    reduce using rule 19 (primary_expression -> literal .)
    COMMA           reduce using rule 19 (primary_expression -> literal .)
    BOX_PAR_CLOSE   reduce using rule 19 (primary_expression -> literal .)


state 24

    (7) declarator -> LET . IDENTIFIER COLON type_specifier

    IDENTIFIER      shift and go to state 52


state 25

    (8) declarator -> CONST . IDENTIFIER COLON type_specifier

    IDENTIFIER      shift and go to state 53


state 26

    (37) or_expression -> and_expression .
    (36) and_expression -> and_expression . AND_OP equality_expression

    OR_OP           reduce using rule 37 (or_expression -> and_expression .)
    SEMICOLON       reduce using rule 37 (or_expression -> and_expression .)
    RND_PAR_CLOSE   reduce using rule 37 (or_expression -> and_expression .)
    CUR_PAR_OPEN    reduce using rule 37 (or_expression -> and_expression .)
    COMMA           reduce using rule 37 (or_expression -> and_expression .)
    BOX_PAR_CLOSE   reduce using rule 37 (or_expression -> and_expression .)
    AND_OP          shift and go to state 54


state 27

    (15) literal -> INT_LITERAL .

    EQUALS          reduce using rule 15 (literal -> INT_LITERAL .)
    PLUS            reduce using rule 15 (literal -> INT_LITERAL .)
    MINUS           reduce using rule 15 (literal -> INT_LITERAL .)
    MUL             reduce using rule 15 (literal -> INT_LITERAL .)
    DIV             reduce using rule 15 (literal -> INT_LITERAL .)
    LESS_OP         reduce using rule 15 (literal -> INT_LITERAL .)
    GREATER_OP      reduce using rule 15 (literal -> INT_LITERAL .)
    LE_OP           reduce using rule 15 (literal -> INT_LITERAL .)
    GE_OP           reduce using rule 15 (literal -> INT_LITERAL .)
    EQ_OP           reduce using rule 15 (literal -> INT_LITERAL .)
    NE_OP           reduce using rule 15 (literal -> INT_LITERAL .)
    AND_OP          reduce using rule 15 (literal -> INT_LITERAL .)
    OR_OP           reduce using rule 15 (literal -> INT_LITERAL .)
    SEMICOLON       reduce using rule 15 (literal -> INT_LITERAL .)
    RND_PAR_CLOSE   reduce using rule 15 (literal -> INT_LITERAL .)
    CUR_PAR_OPEN    reduce using rule 15 (literal -> INT_LITERAL .)
    COMMA           reduce using rule 15 (literal -> INT_LITERAL .)
    BOX_PAR_CLOSE   reduce using rule 15 (literal -> INT_LITERAL .)


state 28

    (16) literal -> FLOAT_LITERAL .

    EQUALS          reduce using rule 16 (literal -> FLOAT_LITERAL .)
    PLUS            reduce using rule 16 (literal -> FLOAT_LITERAL .)
    MINUS           reduce using rule 16 (literal -> FLOAT_LITERAL .)
    MUL             reduce using rule 16 (literal -> FLOAT_LITERAL .)
    DIV             reduce using rule 16 (literal -> FLOAT_LITERAL .)
    LESS_OP         reduce using rule 16 (literal -> FLOAT_LITERAL .)
    GREATER_OP      reduce using rule 16 (literal -> FLOAT_LITERAL .)
    LE_OP           reduce using rule 16 (literal -> FLOAT_LITERAL .)
    GE_OP           reduce using rule 16 (literal -> FLOAT_LITERAL .)
    EQ_OP           reduce using rule 16 (literal -> FLOAT_LITERAL .)
    NE_OP           reduce using rule 16 (literal -> FLOAT_LITERAL .)
    AND_OP          reduce using rule 16 (literal -> FLOAT_LITERAL .)
    OR_OP           reduce using rule 16 (literal -> FLOAT_LITERAL .)
    SEMICOLON       reduce using rule 16 (literal -> FLOAT_LITERAL .)
    RND_PAR_CLOSE   reduce using rule 16 (literal -> FLOAT_LITERAL .)
    CUR_PAR_OPEN    reduce using rule 16 (literal -> FLOAT_LITERAL .)
    COMMA           reduce using rule 16 (literal -> FLOAT_LITERAL .)
    BOX_PAR_CLOSE   reduce using rule 16 (literal -> FLOAT_LITERAL .)


state 29

    (17) literal -> STRING_LITERAL .

    EQUALS          reduce using rule 17 (literal -> STRING_LITERAL .)
    PLUS            reduce using rule 17 (literal -> STRING_LITERAL .)
    MINUS           reduce using rule 17 (literal -> STRING_LITERAL .)
    MUL             reduce using rule 17 (literal -> STRING_LITERAL .)
    DIV             reduce using rule 17 (literal -> STRING_LITERAL .)
    LESS_OP         reduce using rule 17 (literal -> STRING_LITERAL .)
    GREATER_OP      reduce using rule 17 (literal -> STRING_LITERAL .)
    LE_OP           reduce using rule 17 (literal -> STRING_LITERAL .)
    GE_OP           reduce using rule 17 (literal -> STRING_LITERAL .)
    EQ_OP           reduce using rule 17 (literal -> STRING_LITERAL .)
    NE_OP           reduce using rule 17 (literal -> STRING_LITERAL .)
    AND_OP          reduce using rule 17 (literal -> STRING_LITERAL .)
    OR_OP           reduce using rule 17 (literal -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 17 (literal -> STRING_LITERAL .)
    RND_PAR_CLOSE   reduce using rule 17 (literal -> STRING_LITERAL .)
    CUR_PAR_OPEN    reduce using rule 17 (literal -> STRING_LITERAL .)
    COMMA           reduce using rule 17 (literal -> STRING_LITERAL .)
    BOX_PAR_CLOSE   reduce using rule 17 (literal -> STRING_LITERAL .)


state 30

    (35) and_expression -> equality_expression .
    (33) equality_expression -> equality_expression . EQ_OP relational_expression
    (34) equality_expression -> equality_expression . NE_OP relational_expression

    AND_OP          reduce using rule 35 (and_expression -> equality_expression .)
    OR_OP           reduce using rule 35 (and_expression -> equality_expression .)
    SEMICOLON       reduce using rule 35 (and_expression -> equality_expression .)
    RND_PAR_CLOSE   reduce using rule 35 (and_expression -> equality_expression .)
    CUR_PAR_OPEN    reduce using rule 35 (and_expression -> equality_expression .)
    COMMA           reduce using rule 35 (and_expression -> equality_expression .)
    BOX_PAR_CLOSE   reduce using rule 35 (and_expression -> equality_expression .)
    EQ_OP           shift and go to state 55
    NE_OP           shift and go to state 56


state 31

    (32) equality_expression -> relational_expression .
    (28) relational_expression -> relational_expression . LESS_OP multiplicative_expression
    (29) relational_expression -> relational_expression . GREATER_OP multiplicative_expression
    (30) relational_expression -> relational_expression . LE_OP multiplicative_expression
    (31) relational_expression -> relational_expression . GE_OP multiplicative_expression

    EQ_OP           reduce using rule 32 (equality_expression -> relational_expression .)
    NE_OP           reduce using rule 32 (equality_expression -> relational_expression .)
    AND_OP          reduce using rule 32 (equality_expression -> relational_expression .)
    OR_OP           reduce using rule 32 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 32 (equality_expression -> relational_expression .)
    RND_PAR_CLOSE   reduce using rule 32 (equality_expression -> relational_expression .)
    CUR_PAR_OPEN    reduce using rule 32 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 32 (equality_expression -> relational_expression .)
    BOX_PAR_CLOSE   reduce using rule 32 (equality_expression -> relational_expression .)
    LESS_OP         shift and go to state 57
    GREATER_OP      shift and go to state 58
    LE_OP           shift and go to state 59
    GE_OP           shift and go to state 60


state 32

    (24) multiplicative_expression -> additive_expression .
    (22) additive_expression -> additive_expression . PLUS primary_expression
    (23) additive_expression -> additive_expression . MINUS primary_expression

    MUL             reduce using rule 24 (multiplicative_expression -> additive_expression .)
    DIV             reduce using rule 24 (multiplicative_expression -> additive_expression .)
    LESS_OP         reduce using rule 24 (multiplicative_expression -> additive_expression .)
    GREATER_OP      reduce using rule 24 (multiplicative_expression -> additive_expression .)
    LE_OP           reduce using rule 24 (multiplicative_expression -> additive_expression .)
    GE_OP           reduce using rule 24 (multiplicative_expression -> additive_expression .)
    EQ_OP           reduce using rule 24 (multiplicative_expression -> additive_expression .)
    NE_OP           reduce using rule 24 (multiplicative_expression -> additive_expression .)
    AND_OP          reduce using rule 24 (multiplicative_expression -> additive_expression .)
    OR_OP           reduce using rule 24 (multiplicative_expression -> additive_expression .)
    SEMICOLON       reduce using rule 24 (multiplicative_expression -> additive_expression .)
    RND_PAR_CLOSE   reduce using rule 24 (multiplicative_expression -> additive_expression .)
    CUR_PAR_OPEN    reduce using rule 24 (multiplicative_expression -> additive_expression .)
    COMMA           reduce using rule 24 (multiplicative_expression -> additive_expression .)
    BOX_PAR_CLOSE   reduce using rule 24 (multiplicative_expression -> additive_expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62


state 33

    (2) program -> program statement .

    IDENTIFIER      reduce using rule 2 (program -> program statement .)
    CUR_PAR_OPEN    reduce using rule 2 (program -> program statement .)
    FUNC            reduce using rule 2 (program -> program statement .)
    IF              reduce using rule 2 (program -> program statement .)
    FROM            reduce using rule 2 (program -> program statement .)
    WHILE           reduce using rule 2 (program -> program statement .)
    RND_PAR_OPEN    reduce using rule 2 (program -> program statement .)
    LET             reduce using rule 2 (program -> program statement .)
    CONST           reduce using rule 2 (program -> program statement .)
    INT_LITERAL     reduce using rule 2 (program -> program statement .)
    FLOAT_LITERAL   reduce using rule 2 (program -> program statement .)
    STRING_LITERAL  reduce using rule 2 (program -> program statement .)
    $end            reduce using rule 2 (program -> program statement .)


state 34

    (61) function_call -> IDENTIFIER RND_PAR_OPEN . parameter_list RND_PAR_CLOSE SEMICOLON
    (57) parameter_list -> . empty
    (58) parameter_list -> . assignment_expression
    (59) parameter_list -> . parameter_list COMMA assignment_expression
    (67) empty -> .
    (39) assignment_expression -> . or_expression
    (40) assignment_expression -> . primary_expression EQUALS multiplicative_expression
    (37) or_expression -> . and_expression
    (38) or_expression -> . or_expression OR_OP and_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_OP equality_expression
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (27) relational_expression -> . multiplicative_expression
    (28) relational_expression -> . relational_expression LESS_OP multiplicative_expression
    (29) relational_expression -> . relational_expression GREATER_OP multiplicative_expression
    (30) relational_expression -> . relational_expression LE_OP multiplicative_expression
    (31) relational_expression -> . relational_expression GE_OP multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression

    RND_PAR_CLOSE   reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    parameter_list                 shift and go to state 63
    empty                          shift and go to state 64
    assignment_expression          shift and go to state 65
    or_expression                  shift and go to state 21
    primary_expression             shift and go to state 36
    multiplicative_expression      shift and go to state 22
    and_expression                 shift and go to state 26
    literal                        shift and go to state 23
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32

state 35

    (20) primary_expression -> RND_PAR_OPEN assignment_expression . RND_PAR_CLOSE

    RND_PAR_CLOSE   shift and go to state 66


state 36

    (40) assignment_expression -> primary_expression . EQUALS multiplicative_expression
    (21) additive_expression -> primary_expression .

    EQUALS          shift and go to state 67
    PLUS            reduce using rule 21 (additive_expression -> primary_expression .)
    MINUS           reduce using rule 21 (additive_expression -> primary_expression .)
    MUL             reduce using rule 21 (additive_expression -> primary_expression .)
    DIV             reduce using rule 21 (additive_expression -> primary_expression .)
    LESS_OP         reduce using rule 21 (additive_expression -> primary_expression .)
    GREATER_OP      reduce using rule 21 (additive_expression -> primary_expression .)
    LE_OP           reduce using rule 21 (additive_expression -> primary_expression .)
    GE_OP           reduce using rule 21 (additive_expression -> primary_expression .)
    EQ_OP           reduce using rule 21 (additive_expression -> primary_expression .)
    NE_OP           reduce using rule 21 (additive_expression -> primary_expression .)
    AND_OP          reduce using rule 21 (additive_expression -> primary_expression .)
    OR_OP           reduce using rule 21 (additive_expression -> primary_expression .)
    RND_PAR_CLOSE   reduce using rule 21 (additive_expression -> primary_expression .)
    CUR_PAR_OPEN    reduce using rule 21 (additive_expression -> primary_expression .)
    COMMA           reduce using rule 21 (additive_expression -> primary_expression .)
    SEMICOLON       reduce using rule 21 (additive_expression -> primary_expression .)
    BOX_PAR_CLOSE   reduce using rule 21 (additive_expression -> primary_expression .)


state 37

    (18) primary_expression -> IDENTIFIER .

    EQUALS          reduce using rule 18 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 18 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    MUL             reduce using rule 18 (primary_expression -> IDENTIFIER .)
    DIV             reduce using rule 18 (primary_expression -> IDENTIFIER .)
    LESS_OP         reduce using rule 18 (primary_expression -> IDENTIFIER .)
    GREATER_OP      reduce using rule 18 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 18 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    RND_PAR_CLOSE   reduce using rule 18 (primary_expression -> IDENTIFIER .)
    CUR_PAR_OPEN    reduce using rule 18 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 18 (primary_expression -> IDENTIFIER .)
    BOX_PAR_CLOSE   reduce using rule 18 (primary_expression -> IDENTIFIER .)


state 38

    (50) compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE .

    IDENTIFIER      reduce using rule 50 (compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE .)
    CUR_PAR_OPEN    reduce using rule 50 (compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE .)
    FUNC            reduce using rule 50 (compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE .)
    IF              reduce using rule 50 (compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE .)
    FROM            reduce using rule 50 (compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE .)
    WHILE           reduce using rule 50 (compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE .)
    RND_PAR_OPEN    reduce using rule 50 (compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE .)
    LET             reduce using rule 50 (compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE .)
    CONST           reduce using rule 50 (compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE .)
    INT_LITERAL     reduce using rule 50 (compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE .)
    FLOAT_LITERAL   reduce using rule 50 (compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE .)
    STRING_LITERAL  reduce using rule 50 (compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE .)
    $end            reduce using rule 50 (compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE .)
    CUR_PAR_CLOSE   reduce using rule 50 (compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE .)
    ELSE            reduce using rule 50 (compound_statement -> CUR_PAR_OPEN CUR_PAR_CLOSE .)


state 39

    (51) compound_statement -> CUR_PAR_OPEN statement_list . CUR_PAR_CLOSE
    (49) statement_list -> statement_list . statement
    (41) statement -> . function_call
    (42) statement -> . compound_statement
    (43) statement -> . assignment_statement
    (44) statement -> . function_definition
    (45) statement -> . declaration
    (46) statement -> . selection_statement
    (47) statement -> . iteration_statement
    (61) function_call -> . IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON
    (50) compound_statement -> . CUR_PAR_OPEN CUR_PAR_CLOSE
    (51) compound_statement -> . CUR_PAR_OPEN statement_list CUR_PAR_CLOSE
    (52) assignment_statement -> . assignment_expression SEMICOLON
    (53) assignment_statement -> . primary_expression EQUALS function_call
    (60) function_definition -> . FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement
    (3) declaration -> . init_declarator SEMICOLON
    (4) declaration -> . declarator EQUALS function_call
    (62) selection_statement -> . IF assignment_expression compound_statement
    (63) selection_statement -> . IF assignment_expression compound_statement ELSE compound_statement
    (64) iteration_statement -> . FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement
    (65) iteration_statement -> . FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement
    (66) iteration_statement -> . WHILE assignment_expression compound_statement
    (39) assignment_expression -> . or_expression
    (40) assignment_expression -> . primary_expression EQUALS multiplicative_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (5) init_declarator -> . declarator
    (6) init_declarator -> . declarator EQUALS assignment_expression
    (7) declarator -> . LET IDENTIFIER COLON type_specifier
    (8) declarator -> . CONST IDENTIFIER COLON type_specifier
    (37) or_expression -> . and_expression
    (38) or_expression -> . or_expression OR_OP and_expression
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_OP equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (27) relational_expression -> . multiplicative_expression
    (28) relational_expression -> . relational_expression LESS_OP multiplicative_expression
    (29) relational_expression -> . relational_expression GREATER_OP multiplicative_expression
    (30) relational_expression -> . relational_expression LE_OP multiplicative_expression
    (31) relational_expression -> . relational_expression GE_OP multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression

    CUR_PAR_CLOSE   shift and go to state 68
    IDENTIFIER      shift and go to state 10
    CUR_PAR_OPEN    shift and go to state 12
    FUNC            shift and go to state 15
    IF              shift and go to state 18
    FROM            shift and go to state 19
    WHILE           shift and go to state 20
    RND_PAR_OPEN    shift and go to state 11
    LET             shift and go to state 24
    CONST           shift and go to state 25
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    statement                      shift and go to state 69
    function_call                  shift and go to state 3
    compound_statement             shift and go to state 4
    assignment_statement           shift and go to state 5
    function_definition            shift and go to state 6
    declaration                    shift and go to state 7
    selection_statement            shift and go to state 8
    iteration_statement            shift and go to state 9
    assignment_expression          shift and go to state 13
    primary_expression             shift and go to state 14
    init_declarator                shift and go to state 16
    declarator                     shift and go to state 17
    or_expression                  shift and go to state 21
    multiplicative_expression      shift and go to state 22
    literal                        shift and go to state 23
    and_expression                 shift and go to state 26
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32

state 40

    (48) statement_list -> statement .

    CUR_PAR_CLOSE   reduce using rule 48 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 48 (statement_list -> statement .)
    CUR_PAR_OPEN    reduce using rule 48 (statement_list -> statement .)
    FUNC            reduce using rule 48 (statement_list -> statement .)
    IF              reduce using rule 48 (statement_list -> statement .)
    FROM            reduce using rule 48 (statement_list -> statement .)
    WHILE           reduce using rule 48 (statement_list -> statement .)
    RND_PAR_OPEN    reduce using rule 48 (statement_list -> statement .)
    LET             reduce using rule 48 (statement_list -> statement .)
    CONST           reduce using rule 48 (statement_list -> statement .)
    INT_LITERAL     reduce using rule 48 (statement_list -> statement .)
    FLOAT_LITERAL   reduce using rule 48 (statement_list -> statement .)
    STRING_LITERAL  reduce using rule 48 (statement_list -> statement .)


state 41

    (52) assignment_statement -> assignment_expression SEMICOLON .

    IDENTIFIER      reduce using rule 52 (assignment_statement -> assignment_expression SEMICOLON .)
    CUR_PAR_OPEN    reduce using rule 52 (assignment_statement -> assignment_expression SEMICOLON .)
    FUNC            reduce using rule 52 (assignment_statement -> assignment_expression SEMICOLON .)
    IF              reduce using rule 52 (assignment_statement -> assignment_expression SEMICOLON .)
    FROM            reduce using rule 52 (assignment_statement -> assignment_expression SEMICOLON .)
    WHILE           reduce using rule 52 (assignment_statement -> assignment_expression SEMICOLON .)
    RND_PAR_OPEN    reduce using rule 52 (assignment_statement -> assignment_expression SEMICOLON .)
    LET             reduce using rule 52 (assignment_statement -> assignment_expression SEMICOLON .)
    CONST           reduce using rule 52 (assignment_statement -> assignment_expression SEMICOLON .)
    INT_LITERAL     reduce using rule 52 (assignment_statement -> assignment_expression SEMICOLON .)
    FLOAT_LITERAL   reduce using rule 52 (assignment_statement -> assignment_expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 52 (assignment_statement -> assignment_expression SEMICOLON .)
    $end            reduce using rule 52 (assignment_statement -> assignment_expression SEMICOLON .)
    CUR_PAR_CLOSE   reduce using rule 52 (assignment_statement -> assignment_expression SEMICOLON .)


state 42

    (53) assignment_statement -> primary_expression EQUALS . function_call
    (40) assignment_expression -> primary_expression EQUALS . multiplicative_expression
    (61) function_call -> . IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL

    IDENTIFIER      shift and go to state 10
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    primary_expression             shift and go to state 70
    function_call                  shift and go to state 71
    multiplicative_expression      shift and go to state 72
    additive_expression            shift and go to state 32
    literal                        shift and go to state 23

state 43

    (60) function_definition -> FUNC IDENTIFIER . RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement

    RND_PAR_OPEN    shift and go to state 73


state 44

    (3) declaration -> init_declarator SEMICOLON .

    IDENTIFIER      reduce using rule 3 (declaration -> init_declarator SEMICOLON .)
    CUR_PAR_OPEN    reduce using rule 3 (declaration -> init_declarator SEMICOLON .)
    FUNC            reduce using rule 3 (declaration -> init_declarator SEMICOLON .)
    IF              reduce using rule 3 (declaration -> init_declarator SEMICOLON .)
    FROM            reduce using rule 3 (declaration -> init_declarator SEMICOLON .)
    WHILE           reduce using rule 3 (declaration -> init_declarator SEMICOLON .)
    RND_PAR_OPEN    reduce using rule 3 (declaration -> init_declarator SEMICOLON .)
    LET             reduce using rule 3 (declaration -> init_declarator SEMICOLON .)
    CONST           reduce using rule 3 (declaration -> init_declarator SEMICOLON .)
    INT_LITERAL     reduce using rule 3 (declaration -> init_declarator SEMICOLON .)
    FLOAT_LITERAL   reduce using rule 3 (declaration -> init_declarator SEMICOLON .)
    STRING_LITERAL  reduce using rule 3 (declaration -> init_declarator SEMICOLON .)
    $end            reduce using rule 3 (declaration -> init_declarator SEMICOLON .)
    CUR_PAR_CLOSE   reduce using rule 3 (declaration -> init_declarator SEMICOLON .)


state 45

    (4) declaration -> declarator EQUALS . function_call
    (6) init_declarator -> declarator EQUALS . assignment_expression
    (61) function_call -> . IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON
    (39) assignment_expression -> . or_expression
    (40) assignment_expression -> . primary_expression EQUALS multiplicative_expression
    (37) or_expression -> . and_expression
    (38) or_expression -> . or_expression OR_OP and_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_OP equality_expression
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (27) relational_expression -> . multiplicative_expression
    (28) relational_expression -> . relational_expression LESS_OP multiplicative_expression
    (29) relational_expression -> . relational_expression GREATER_OP multiplicative_expression
    (30) relational_expression -> . relational_expression LE_OP multiplicative_expression
    (31) relational_expression -> . relational_expression GE_OP multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression

    IDENTIFIER      shift and go to state 10
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    function_call                  shift and go to state 74
    assignment_expression          shift and go to state 75
    or_expression                  shift and go to state 21
    primary_expression             shift and go to state 36
    multiplicative_expression      shift and go to state 22
    and_expression                 shift and go to state 26
    literal                        shift and go to state 23
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32

state 46

    (62) selection_statement -> IF assignment_expression . compound_statement
    (63) selection_statement -> IF assignment_expression . compound_statement ELSE compound_statement
    (50) compound_statement -> . CUR_PAR_OPEN CUR_PAR_CLOSE
    (51) compound_statement -> . CUR_PAR_OPEN statement_list CUR_PAR_CLOSE

    CUR_PAR_OPEN    shift and go to state 12

    compound_statement             shift and go to state 76

state 47

    (64) iteration_statement -> FROM BOX_PAR_OPEN . assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement
    (65) iteration_statement -> FROM BOX_PAR_OPEN . assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement
    (39) assignment_expression -> . or_expression
    (40) assignment_expression -> . primary_expression EQUALS multiplicative_expression
    (37) or_expression -> . and_expression
    (38) or_expression -> . or_expression OR_OP and_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_OP equality_expression
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (27) relational_expression -> . multiplicative_expression
    (28) relational_expression -> . relational_expression LESS_OP multiplicative_expression
    (29) relational_expression -> . relational_expression GREATER_OP multiplicative_expression
    (30) relational_expression -> . relational_expression LE_OP multiplicative_expression
    (31) relational_expression -> . relational_expression GE_OP multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    assignment_expression          shift and go to state 77
    or_expression                  shift and go to state 21
    primary_expression             shift and go to state 36
    multiplicative_expression      shift and go to state 22
    and_expression                 shift and go to state 26
    literal                        shift and go to state 23
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32

state 48

    (66) iteration_statement -> WHILE assignment_expression . compound_statement
    (50) compound_statement -> . CUR_PAR_OPEN CUR_PAR_CLOSE
    (51) compound_statement -> . CUR_PAR_OPEN statement_list CUR_PAR_CLOSE

    CUR_PAR_OPEN    shift and go to state 12

    compound_statement             shift and go to state 78

state 49

    (38) or_expression -> or_expression OR_OP . and_expression
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_OP equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (27) relational_expression -> . multiplicative_expression
    (28) relational_expression -> . relational_expression LESS_OP multiplicative_expression
    (29) relational_expression -> . relational_expression GREATER_OP multiplicative_expression
    (30) relational_expression -> . relational_expression LE_OP multiplicative_expression
    (31) relational_expression -> . relational_expression GE_OP multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    and_expression                 shift and go to state 79
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    multiplicative_expression      shift and go to state 22
    additive_expression            shift and go to state 32
    primary_expression             shift and go to state 70
    literal                        shift and go to state 23

state 50

    (25) multiplicative_expression -> multiplicative_expression MUL . additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    additive_expression            shift and go to state 80
    primary_expression             shift and go to state 70
    literal                        shift and go to state 23

state 51

    (26) multiplicative_expression -> multiplicative_expression DIV . additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    additive_expression            shift and go to state 81
    primary_expression             shift and go to state 70
    literal                        shift and go to state 23

state 52

    (7) declarator -> LET IDENTIFIER . COLON type_specifier

    COLON           shift and go to state 82


state 53

    (8) declarator -> CONST IDENTIFIER . COLON type_specifier

    COLON           shift and go to state 83


state 54

    (36) and_expression -> and_expression AND_OP . equality_expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (27) relational_expression -> . multiplicative_expression
    (28) relational_expression -> . relational_expression LESS_OP multiplicative_expression
    (29) relational_expression -> . relational_expression GREATER_OP multiplicative_expression
    (30) relational_expression -> . relational_expression LE_OP multiplicative_expression
    (31) relational_expression -> . relational_expression GE_OP multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 31
    multiplicative_expression      shift and go to state 22
    additive_expression            shift and go to state 32
    primary_expression             shift and go to state 70
    literal                        shift and go to state 23

state 55

    (33) equality_expression -> equality_expression EQ_OP . relational_expression
    (27) relational_expression -> . multiplicative_expression
    (28) relational_expression -> . relational_expression LESS_OP multiplicative_expression
    (29) relational_expression -> . relational_expression GREATER_OP multiplicative_expression
    (30) relational_expression -> . relational_expression LE_OP multiplicative_expression
    (31) relational_expression -> . relational_expression GE_OP multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    relational_expression          shift and go to state 85
    multiplicative_expression      shift and go to state 22
    additive_expression            shift and go to state 32
    primary_expression             shift and go to state 70
    literal                        shift and go to state 23

state 56

    (34) equality_expression -> equality_expression NE_OP . relational_expression
    (27) relational_expression -> . multiplicative_expression
    (28) relational_expression -> . relational_expression LESS_OP multiplicative_expression
    (29) relational_expression -> . relational_expression GREATER_OP multiplicative_expression
    (30) relational_expression -> . relational_expression LE_OP multiplicative_expression
    (31) relational_expression -> . relational_expression GE_OP multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    relational_expression          shift and go to state 86
    multiplicative_expression      shift and go to state 22
    additive_expression            shift and go to state 32
    primary_expression             shift and go to state 70
    literal                        shift and go to state 23

state 57

    (28) relational_expression -> relational_expression LESS_OP . multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    multiplicative_expression      shift and go to state 87
    additive_expression            shift and go to state 32
    primary_expression             shift and go to state 70
    literal                        shift and go to state 23

state 58

    (29) relational_expression -> relational_expression GREATER_OP . multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    multiplicative_expression      shift and go to state 88
    additive_expression            shift and go to state 32
    primary_expression             shift and go to state 70
    literal                        shift and go to state 23

state 59

    (30) relational_expression -> relational_expression LE_OP . multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    multiplicative_expression      shift and go to state 89
    additive_expression            shift and go to state 32
    primary_expression             shift and go to state 70
    literal                        shift and go to state 23

state 60

    (31) relational_expression -> relational_expression GE_OP . multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    multiplicative_expression      shift and go to state 90
    additive_expression            shift and go to state 32
    primary_expression             shift and go to state 70
    literal                        shift and go to state 23

state 61

    (22) additive_expression -> additive_expression PLUS . primary_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    primary_expression             shift and go to state 91
    literal                        shift and go to state 23

state 62

    (23) additive_expression -> additive_expression MINUS . primary_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    primary_expression             shift and go to state 92
    literal                        shift and go to state 23

state 63

    (61) function_call -> IDENTIFIER RND_PAR_OPEN parameter_list . RND_PAR_CLOSE SEMICOLON
    (59) parameter_list -> parameter_list . COMMA assignment_expression

    RND_PAR_CLOSE   shift and go to state 93
    COMMA           shift and go to state 94


state 64

    (57) parameter_list -> empty .

    RND_PAR_CLOSE   reduce using rule 57 (parameter_list -> empty .)
    COMMA           reduce using rule 57 (parameter_list -> empty .)


state 65

    (58) parameter_list -> assignment_expression .

    RND_PAR_CLOSE   reduce using rule 58 (parameter_list -> assignment_expression .)
    COMMA           reduce using rule 58 (parameter_list -> assignment_expression .)


state 66

    (20) primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .

    EQUALS          reduce using rule 20 (primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .)
    PLUS            reduce using rule 20 (primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .)
    MINUS           reduce using rule 20 (primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .)
    MUL             reduce using rule 20 (primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .)
    DIV             reduce using rule 20 (primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .)
    LESS_OP         reduce using rule 20 (primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .)
    GREATER_OP      reduce using rule 20 (primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .)
    LE_OP           reduce using rule 20 (primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .)
    GE_OP           reduce using rule 20 (primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .)
    EQ_OP           reduce using rule 20 (primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .)
    NE_OP           reduce using rule 20 (primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .)
    AND_OP          reduce using rule 20 (primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .)
    OR_OP           reduce using rule 20 (primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .)
    SEMICOLON       reduce using rule 20 (primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .)
    RND_PAR_CLOSE   reduce using rule 20 (primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .)
    CUR_PAR_OPEN    reduce using rule 20 (primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .)
    COMMA           reduce using rule 20 (primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .)
    BOX_PAR_CLOSE   reduce using rule 20 (primary_expression -> RND_PAR_OPEN assignment_expression RND_PAR_CLOSE .)


state 67

    (40) assignment_expression -> primary_expression EQUALS . multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    primary_expression             shift and go to state 70
    multiplicative_expression      shift and go to state 72
    additive_expression            shift and go to state 32
    literal                        shift and go to state 23

state 68

    (51) compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE .

    IDENTIFIER      reduce using rule 51 (compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE .)
    CUR_PAR_OPEN    reduce using rule 51 (compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE .)
    FUNC            reduce using rule 51 (compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE .)
    IF              reduce using rule 51 (compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE .)
    FROM            reduce using rule 51 (compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE .)
    WHILE           reduce using rule 51 (compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE .)
    RND_PAR_OPEN    reduce using rule 51 (compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE .)
    LET             reduce using rule 51 (compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE .)
    CONST           reduce using rule 51 (compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE .)
    INT_LITERAL     reduce using rule 51 (compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE .)
    FLOAT_LITERAL   reduce using rule 51 (compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE .)
    STRING_LITERAL  reduce using rule 51 (compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE .)
    $end            reduce using rule 51 (compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE .)
    CUR_PAR_CLOSE   reduce using rule 51 (compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE .)
    ELSE            reduce using rule 51 (compound_statement -> CUR_PAR_OPEN statement_list CUR_PAR_CLOSE .)


state 69

    (49) statement_list -> statement_list statement .

    CUR_PAR_CLOSE   reduce using rule 49 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 49 (statement_list -> statement_list statement .)
    CUR_PAR_OPEN    reduce using rule 49 (statement_list -> statement_list statement .)
    FUNC            reduce using rule 49 (statement_list -> statement_list statement .)
    IF              reduce using rule 49 (statement_list -> statement_list statement .)
    FROM            reduce using rule 49 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 49 (statement_list -> statement_list statement .)
    RND_PAR_OPEN    reduce using rule 49 (statement_list -> statement_list statement .)
    LET             reduce using rule 49 (statement_list -> statement_list statement .)
    CONST           reduce using rule 49 (statement_list -> statement_list statement .)
    INT_LITERAL     reduce using rule 49 (statement_list -> statement_list statement .)
    FLOAT_LITERAL   reduce using rule 49 (statement_list -> statement_list statement .)
    STRING_LITERAL  reduce using rule 49 (statement_list -> statement_list statement .)


state 70

    (21) additive_expression -> primary_expression .

    PLUS            reduce using rule 21 (additive_expression -> primary_expression .)
    MINUS           reduce using rule 21 (additive_expression -> primary_expression .)
    MUL             reduce using rule 21 (additive_expression -> primary_expression .)
    DIV             reduce using rule 21 (additive_expression -> primary_expression .)
    SEMICOLON       reduce using rule 21 (additive_expression -> primary_expression .)
    LESS_OP         reduce using rule 21 (additive_expression -> primary_expression .)
    GREATER_OP      reduce using rule 21 (additive_expression -> primary_expression .)
    LE_OP           reduce using rule 21 (additive_expression -> primary_expression .)
    GE_OP           reduce using rule 21 (additive_expression -> primary_expression .)
    EQ_OP           reduce using rule 21 (additive_expression -> primary_expression .)
    NE_OP           reduce using rule 21 (additive_expression -> primary_expression .)
    AND_OP          reduce using rule 21 (additive_expression -> primary_expression .)
    OR_OP           reduce using rule 21 (additive_expression -> primary_expression .)
    RND_PAR_CLOSE   reduce using rule 21 (additive_expression -> primary_expression .)
    CUR_PAR_OPEN    reduce using rule 21 (additive_expression -> primary_expression .)
    COMMA           reduce using rule 21 (additive_expression -> primary_expression .)
    BOX_PAR_CLOSE   reduce using rule 21 (additive_expression -> primary_expression .)


state 71

    (53) assignment_statement -> primary_expression EQUALS function_call .

    IDENTIFIER      reduce using rule 53 (assignment_statement -> primary_expression EQUALS function_call .)
    CUR_PAR_OPEN    reduce using rule 53 (assignment_statement -> primary_expression EQUALS function_call .)
    FUNC            reduce using rule 53 (assignment_statement -> primary_expression EQUALS function_call .)
    IF              reduce using rule 53 (assignment_statement -> primary_expression EQUALS function_call .)
    FROM            reduce using rule 53 (assignment_statement -> primary_expression EQUALS function_call .)
    WHILE           reduce using rule 53 (assignment_statement -> primary_expression EQUALS function_call .)
    RND_PAR_OPEN    reduce using rule 53 (assignment_statement -> primary_expression EQUALS function_call .)
    LET             reduce using rule 53 (assignment_statement -> primary_expression EQUALS function_call .)
    CONST           reduce using rule 53 (assignment_statement -> primary_expression EQUALS function_call .)
    INT_LITERAL     reduce using rule 53 (assignment_statement -> primary_expression EQUALS function_call .)
    FLOAT_LITERAL   reduce using rule 53 (assignment_statement -> primary_expression EQUALS function_call .)
    STRING_LITERAL  reduce using rule 53 (assignment_statement -> primary_expression EQUALS function_call .)
    $end            reduce using rule 53 (assignment_statement -> primary_expression EQUALS function_call .)
    CUR_PAR_CLOSE   reduce using rule 53 (assignment_statement -> primary_expression EQUALS function_call .)


state 72

    (40) assignment_expression -> primary_expression EQUALS multiplicative_expression .
    (25) multiplicative_expression -> multiplicative_expression . MUL additive_expression
    (26) multiplicative_expression -> multiplicative_expression . DIV additive_expression

    SEMICOLON       reduce using rule 40 (assignment_expression -> primary_expression EQUALS multiplicative_expression .)
    RND_PAR_CLOSE   reduce using rule 40 (assignment_expression -> primary_expression EQUALS multiplicative_expression .)
    CUR_PAR_OPEN    reduce using rule 40 (assignment_expression -> primary_expression EQUALS multiplicative_expression .)
    COMMA           reduce using rule 40 (assignment_expression -> primary_expression EQUALS multiplicative_expression .)
    BOX_PAR_CLOSE   reduce using rule 40 (assignment_expression -> primary_expression EQUALS multiplicative_expression .)
    MUL             shift and go to state 50
    DIV             shift and go to state 51


state 73

    (60) function_definition -> FUNC IDENTIFIER RND_PAR_OPEN . identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement
    (54) identifier_list -> . empty
    (55) identifier_list -> . IDENTIFIER COLON type_specifier
    (56) identifier_list -> . identifier_list COMMA IDENTIFIER COLON type_specifier
    (67) empty -> .

    IDENTIFIER      shift and go to state 95
    RND_PAR_CLOSE   reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)

    identifier_list                shift and go to state 96
    empty                          shift and go to state 97

state 74

    (4) declaration -> declarator EQUALS function_call .

    IDENTIFIER      reduce using rule 4 (declaration -> declarator EQUALS function_call .)
    CUR_PAR_OPEN    reduce using rule 4 (declaration -> declarator EQUALS function_call .)
    FUNC            reduce using rule 4 (declaration -> declarator EQUALS function_call .)
    IF              reduce using rule 4 (declaration -> declarator EQUALS function_call .)
    FROM            reduce using rule 4 (declaration -> declarator EQUALS function_call .)
    WHILE           reduce using rule 4 (declaration -> declarator EQUALS function_call .)
    RND_PAR_OPEN    reduce using rule 4 (declaration -> declarator EQUALS function_call .)
    LET             reduce using rule 4 (declaration -> declarator EQUALS function_call .)
    CONST           reduce using rule 4 (declaration -> declarator EQUALS function_call .)
    INT_LITERAL     reduce using rule 4 (declaration -> declarator EQUALS function_call .)
    FLOAT_LITERAL   reduce using rule 4 (declaration -> declarator EQUALS function_call .)
    STRING_LITERAL  reduce using rule 4 (declaration -> declarator EQUALS function_call .)
    $end            reduce using rule 4 (declaration -> declarator EQUALS function_call .)
    CUR_PAR_CLOSE   reduce using rule 4 (declaration -> declarator EQUALS function_call .)


state 75

    (6) init_declarator -> declarator EQUALS assignment_expression .

    SEMICOLON       reduce using rule 6 (init_declarator -> declarator EQUALS assignment_expression .)


state 76

    (62) selection_statement -> IF assignment_expression compound_statement .
    (63) selection_statement -> IF assignment_expression compound_statement . ELSE compound_statement

    IDENTIFIER      reduce using rule 62 (selection_statement -> IF assignment_expression compound_statement .)
    CUR_PAR_OPEN    reduce using rule 62 (selection_statement -> IF assignment_expression compound_statement .)
    FUNC            reduce using rule 62 (selection_statement -> IF assignment_expression compound_statement .)
    IF              reduce using rule 62 (selection_statement -> IF assignment_expression compound_statement .)
    FROM            reduce using rule 62 (selection_statement -> IF assignment_expression compound_statement .)
    WHILE           reduce using rule 62 (selection_statement -> IF assignment_expression compound_statement .)
    RND_PAR_OPEN    reduce using rule 62 (selection_statement -> IF assignment_expression compound_statement .)
    LET             reduce using rule 62 (selection_statement -> IF assignment_expression compound_statement .)
    CONST           reduce using rule 62 (selection_statement -> IF assignment_expression compound_statement .)
    INT_LITERAL     reduce using rule 62 (selection_statement -> IF assignment_expression compound_statement .)
    FLOAT_LITERAL   reduce using rule 62 (selection_statement -> IF assignment_expression compound_statement .)
    STRING_LITERAL  reduce using rule 62 (selection_statement -> IF assignment_expression compound_statement .)
    $end            reduce using rule 62 (selection_statement -> IF assignment_expression compound_statement .)
    CUR_PAR_CLOSE   reduce using rule 62 (selection_statement -> IF assignment_expression compound_statement .)
    ELSE            shift and go to state 98


state 77

    (64) iteration_statement -> FROM BOX_PAR_OPEN assignment_expression . COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement
    (65) iteration_statement -> FROM BOX_PAR_OPEN assignment_expression . COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement

    COMMA           shift and go to state 99


state 78

    (66) iteration_statement -> WHILE assignment_expression compound_statement .

    IDENTIFIER      reduce using rule 66 (iteration_statement -> WHILE assignment_expression compound_statement .)
    CUR_PAR_OPEN    reduce using rule 66 (iteration_statement -> WHILE assignment_expression compound_statement .)
    FUNC            reduce using rule 66 (iteration_statement -> WHILE assignment_expression compound_statement .)
    IF              reduce using rule 66 (iteration_statement -> WHILE assignment_expression compound_statement .)
    FROM            reduce using rule 66 (iteration_statement -> WHILE assignment_expression compound_statement .)
    WHILE           reduce using rule 66 (iteration_statement -> WHILE assignment_expression compound_statement .)
    RND_PAR_OPEN    reduce using rule 66 (iteration_statement -> WHILE assignment_expression compound_statement .)
    LET             reduce using rule 66 (iteration_statement -> WHILE assignment_expression compound_statement .)
    CONST           reduce using rule 66 (iteration_statement -> WHILE assignment_expression compound_statement .)
    INT_LITERAL     reduce using rule 66 (iteration_statement -> WHILE assignment_expression compound_statement .)
    FLOAT_LITERAL   reduce using rule 66 (iteration_statement -> WHILE assignment_expression compound_statement .)
    STRING_LITERAL  reduce using rule 66 (iteration_statement -> WHILE assignment_expression compound_statement .)
    $end            reduce using rule 66 (iteration_statement -> WHILE assignment_expression compound_statement .)
    CUR_PAR_CLOSE   reduce using rule 66 (iteration_statement -> WHILE assignment_expression compound_statement .)


state 79

    (38) or_expression -> or_expression OR_OP and_expression .
    (36) and_expression -> and_expression . AND_OP equality_expression

    OR_OP           reduce using rule 38 (or_expression -> or_expression OR_OP and_expression .)
    SEMICOLON       reduce using rule 38 (or_expression -> or_expression OR_OP and_expression .)
    RND_PAR_CLOSE   reduce using rule 38 (or_expression -> or_expression OR_OP and_expression .)
    CUR_PAR_OPEN    reduce using rule 38 (or_expression -> or_expression OR_OP and_expression .)
    COMMA           reduce using rule 38 (or_expression -> or_expression OR_OP and_expression .)
    BOX_PAR_CLOSE   reduce using rule 38 (or_expression -> or_expression OR_OP and_expression .)
    AND_OP          shift and go to state 54


state 80

    (25) multiplicative_expression -> multiplicative_expression MUL additive_expression .
    (22) additive_expression -> additive_expression . PLUS primary_expression
    (23) additive_expression -> additive_expression . MINUS primary_expression

    MUL             reduce using rule 25 (multiplicative_expression -> multiplicative_expression MUL additive_expression .)
    DIV             reduce using rule 25 (multiplicative_expression -> multiplicative_expression MUL additive_expression .)
    LESS_OP         reduce using rule 25 (multiplicative_expression -> multiplicative_expression MUL additive_expression .)
    GREATER_OP      reduce using rule 25 (multiplicative_expression -> multiplicative_expression MUL additive_expression .)
    LE_OP           reduce using rule 25 (multiplicative_expression -> multiplicative_expression MUL additive_expression .)
    GE_OP           reduce using rule 25 (multiplicative_expression -> multiplicative_expression MUL additive_expression .)
    EQ_OP           reduce using rule 25 (multiplicative_expression -> multiplicative_expression MUL additive_expression .)
    NE_OP           reduce using rule 25 (multiplicative_expression -> multiplicative_expression MUL additive_expression .)
    AND_OP          reduce using rule 25 (multiplicative_expression -> multiplicative_expression MUL additive_expression .)
    OR_OP           reduce using rule 25 (multiplicative_expression -> multiplicative_expression MUL additive_expression .)
    SEMICOLON       reduce using rule 25 (multiplicative_expression -> multiplicative_expression MUL additive_expression .)
    RND_PAR_CLOSE   reduce using rule 25 (multiplicative_expression -> multiplicative_expression MUL additive_expression .)
    CUR_PAR_OPEN    reduce using rule 25 (multiplicative_expression -> multiplicative_expression MUL additive_expression .)
    COMMA           reduce using rule 25 (multiplicative_expression -> multiplicative_expression MUL additive_expression .)
    BOX_PAR_CLOSE   reduce using rule 25 (multiplicative_expression -> multiplicative_expression MUL additive_expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62


state 81

    (26) multiplicative_expression -> multiplicative_expression DIV additive_expression .
    (22) additive_expression -> additive_expression . PLUS primary_expression
    (23) additive_expression -> additive_expression . MINUS primary_expression

    MUL             reduce using rule 26 (multiplicative_expression -> multiplicative_expression DIV additive_expression .)
    DIV             reduce using rule 26 (multiplicative_expression -> multiplicative_expression DIV additive_expression .)
    LESS_OP         reduce using rule 26 (multiplicative_expression -> multiplicative_expression DIV additive_expression .)
    GREATER_OP      reduce using rule 26 (multiplicative_expression -> multiplicative_expression DIV additive_expression .)
    LE_OP           reduce using rule 26 (multiplicative_expression -> multiplicative_expression DIV additive_expression .)
    GE_OP           reduce using rule 26 (multiplicative_expression -> multiplicative_expression DIV additive_expression .)
    EQ_OP           reduce using rule 26 (multiplicative_expression -> multiplicative_expression DIV additive_expression .)
    NE_OP           reduce using rule 26 (multiplicative_expression -> multiplicative_expression DIV additive_expression .)
    AND_OP          reduce using rule 26 (multiplicative_expression -> multiplicative_expression DIV additive_expression .)
    OR_OP           reduce using rule 26 (multiplicative_expression -> multiplicative_expression DIV additive_expression .)
    SEMICOLON       reduce using rule 26 (multiplicative_expression -> multiplicative_expression DIV additive_expression .)
    RND_PAR_CLOSE   reduce using rule 26 (multiplicative_expression -> multiplicative_expression DIV additive_expression .)
    CUR_PAR_OPEN    reduce using rule 26 (multiplicative_expression -> multiplicative_expression DIV additive_expression .)
    COMMA           reduce using rule 26 (multiplicative_expression -> multiplicative_expression DIV additive_expression .)
    BOX_PAR_CLOSE   reduce using rule 26 (multiplicative_expression -> multiplicative_expression DIV additive_expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62


state 82

    (7) declarator -> LET IDENTIFIER COLON . type_specifier
    (9) type_specifier -> . VOID
    (10) type_specifier -> . CHAR
    (11) type_specifier -> . INT
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL

    VOID            shift and go to state 101
    CHAR            shift and go to state 102
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105
    BOOL            shift and go to state 106

    type_specifier                 shift and go to state 100

state 83

    (8) declarator -> CONST IDENTIFIER COLON . type_specifier
    (9) type_specifier -> . VOID
    (10) type_specifier -> . CHAR
    (11) type_specifier -> . INT
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL

    VOID            shift and go to state 101
    CHAR            shift and go to state 102
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105
    BOOL            shift and go to state 106

    type_specifier                 shift and go to state 107

state 84

    (36) and_expression -> and_expression AND_OP equality_expression .
    (33) equality_expression -> equality_expression . EQ_OP relational_expression
    (34) equality_expression -> equality_expression . NE_OP relational_expression

    AND_OP          reduce using rule 36 (and_expression -> and_expression AND_OP equality_expression .)
    OR_OP           reduce using rule 36 (and_expression -> and_expression AND_OP equality_expression .)
    SEMICOLON       reduce using rule 36 (and_expression -> and_expression AND_OP equality_expression .)
    RND_PAR_CLOSE   reduce using rule 36 (and_expression -> and_expression AND_OP equality_expression .)
    CUR_PAR_OPEN    reduce using rule 36 (and_expression -> and_expression AND_OP equality_expression .)
    COMMA           reduce using rule 36 (and_expression -> and_expression AND_OP equality_expression .)
    BOX_PAR_CLOSE   reduce using rule 36 (and_expression -> and_expression AND_OP equality_expression .)
    EQ_OP           shift and go to state 55
    NE_OP           shift and go to state 56


state 85

    (33) equality_expression -> equality_expression EQ_OP relational_expression .
    (28) relational_expression -> relational_expression . LESS_OP multiplicative_expression
    (29) relational_expression -> relational_expression . GREATER_OP multiplicative_expression
    (30) relational_expression -> relational_expression . LE_OP multiplicative_expression
    (31) relational_expression -> relational_expression . GE_OP multiplicative_expression

    EQ_OP           reduce using rule 33 (equality_expression -> equality_expression EQ_OP relational_expression .)
    NE_OP           reduce using rule 33 (equality_expression -> equality_expression EQ_OP relational_expression .)
    AND_OP          reduce using rule 33 (equality_expression -> equality_expression EQ_OP relational_expression .)
    OR_OP           reduce using rule 33 (equality_expression -> equality_expression EQ_OP relational_expression .)
    SEMICOLON       reduce using rule 33 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RND_PAR_CLOSE   reduce using rule 33 (equality_expression -> equality_expression EQ_OP relational_expression .)
    CUR_PAR_OPEN    reduce using rule 33 (equality_expression -> equality_expression EQ_OP relational_expression .)
    COMMA           reduce using rule 33 (equality_expression -> equality_expression EQ_OP relational_expression .)
    BOX_PAR_CLOSE   reduce using rule 33 (equality_expression -> equality_expression EQ_OP relational_expression .)
    LESS_OP         shift and go to state 57
    GREATER_OP      shift and go to state 58
    LE_OP           shift and go to state 59
    GE_OP           shift and go to state 60


state 86

    (34) equality_expression -> equality_expression NE_OP relational_expression .
    (28) relational_expression -> relational_expression . LESS_OP multiplicative_expression
    (29) relational_expression -> relational_expression . GREATER_OP multiplicative_expression
    (30) relational_expression -> relational_expression . LE_OP multiplicative_expression
    (31) relational_expression -> relational_expression . GE_OP multiplicative_expression

    EQ_OP           reduce using rule 34 (equality_expression -> equality_expression NE_OP relational_expression .)
    NE_OP           reduce using rule 34 (equality_expression -> equality_expression NE_OP relational_expression .)
    AND_OP          reduce using rule 34 (equality_expression -> equality_expression NE_OP relational_expression .)
    OR_OP           reduce using rule 34 (equality_expression -> equality_expression NE_OP relational_expression .)
    SEMICOLON       reduce using rule 34 (equality_expression -> equality_expression NE_OP relational_expression .)
    RND_PAR_CLOSE   reduce using rule 34 (equality_expression -> equality_expression NE_OP relational_expression .)
    CUR_PAR_OPEN    reduce using rule 34 (equality_expression -> equality_expression NE_OP relational_expression .)
    COMMA           reduce using rule 34 (equality_expression -> equality_expression NE_OP relational_expression .)
    BOX_PAR_CLOSE   reduce using rule 34 (equality_expression -> equality_expression NE_OP relational_expression .)
    LESS_OP         shift and go to state 57
    GREATER_OP      shift and go to state 58
    LE_OP           shift and go to state 59
    GE_OP           shift and go to state 60


state 87

    (28) relational_expression -> relational_expression LESS_OP multiplicative_expression .
    (25) multiplicative_expression -> multiplicative_expression . MUL additive_expression
    (26) multiplicative_expression -> multiplicative_expression . DIV additive_expression

    LESS_OP         reduce using rule 28 (relational_expression -> relational_expression LESS_OP multiplicative_expression .)
    GREATER_OP      reduce using rule 28 (relational_expression -> relational_expression LESS_OP multiplicative_expression .)
    LE_OP           reduce using rule 28 (relational_expression -> relational_expression LESS_OP multiplicative_expression .)
    GE_OP           reduce using rule 28 (relational_expression -> relational_expression LESS_OP multiplicative_expression .)
    EQ_OP           reduce using rule 28 (relational_expression -> relational_expression LESS_OP multiplicative_expression .)
    NE_OP           reduce using rule 28 (relational_expression -> relational_expression LESS_OP multiplicative_expression .)
    AND_OP          reduce using rule 28 (relational_expression -> relational_expression LESS_OP multiplicative_expression .)
    OR_OP           reduce using rule 28 (relational_expression -> relational_expression LESS_OP multiplicative_expression .)
    SEMICOLON       reduce using rule 28 (relational_expression -> relational_expression LESS_OP multiplicative_expression .)
    RND_PAR_CLOSE   reduce using rule 28 (relational_expression -> relational_expression LESS_OP multiplicative_expression .)
    CUR_PAR_OPEN    reduce using rule 28 (relational_expression -> relational_expression LESS_OP multiplicative_expression .)
    COMMA           reduce using rule 28 (relational_expression -> relational_expression LESS_OP multiplicative_expression .)
    BOX_PAR_CLOSE   reduce using rule 28 (relational_expression -> relational_expression LESS_OP multiplicative_expression .)
    MUL             shift and go to state 50
    DIV             shift and go to state 51


state 88

    (29) relational_expression -> relational_expression GREATER_OP multiplicative_expression .
    (25) multiplicative_expression -> multiplicative_expression . MUL additive_expression
    (26) multiplicative_expression -> multiplicative_expression . DIV additive_expression

    LESS_OP         reduce using rule 29 (relational_expression -> relational_expression GREATER_OP multiplicative_expression .)
    GREATER_OP      reduce using rule 29 (relational_expression -> relational_expression GREATER_OP multiplicative_expression .)
    LE_OP           reduce using rule 29 (relational_expression -> relational_expression GREATER_OP multiplicative_expression .)
    GE_OP           reduce using rule 29 (relational_expression -> relational_expression GREATER_OP multiplicative_expression .)
    EQ_OP           reduce using rule 29 (relational_expression -> relational_expression GREATER_OP multiplicative_expression .)
    NE_OP           reduce using rule 29 (relational_expression -> relational_expression GREATER_OP multiplicative_expression .)
    AND_OP          reduce using rule 29 (relational_expression -> relational_expression GREATER_OP multiplicative_expression .)
    OR_OP           reduce using rule 29 (relational_expression -> relational_expression GREATER_OP multiplicative_expression .)
    SEMICOLON       reduce using rule 29 (relational_expression -> relational_expression GREATER_OP multiplicative_expression .)
    RND_PAR_CLOSE   reduce using rule 29 (relational_expression -> relational_expression GREATER_OP multiplicative_expression .)
    CUR_PAR_OPEN    reduce using rule 29 (relational_expression -> relational_expression GREATER_OP multiplicative_expression .)
    COMMA           reduce using rule 29 (relational_expression -> relational_expression GREATER_OP multiplicative_expression .)
    BOX_PAR_CLOSE   reduce using rule 29 (relational_expression -> relational_expression GREATER_OP multiplicative_expression .)
    MUL             shift and go to state 50
    DIV             shift and go to state 51


state 89

    (30) relational_expression -> relational_expression LE_OP multiplicative_expression .
    (25) multiplicative_expression -> multiplicative_expression . MUL additive_expression
    (26) multiplicative_expression -> multiplicative_expression . DIV additive_expression

    LESS_OP         reduce using rule 30 (relational_expression -> relational_expression LE_OP multiplicative_expression .)
    GREATER_OP      reduce using rule 30 (relational_expression -> relational_expression LE_OP multiplicative_expression .)
    LE_OP           reduce using rule 30 (relational_expression -> relational_expression LE_OP multiplicative_expression .)
    GE_OP           reduce using rule 30 (relational_expression -> relational_expression LE_OP multiplicative_expression .)
    EQ_OP           reduce using rule 30 (relational_expression -> relational_expression LE_OP multiplicative_expression .)
    NE_OP           reduce using rule 30 (relational_expression -> relational_expression LE_OP multiplicative_expression .)
    AND_OP          reduce using rule 30 (relational_expression -> relational_expression LE_OP multiplicative_expression .)
    OR_OP           reduce using rule 30 (relational_expression -> relational_expression LE_OP multiplicative_expression .)
    SEMICOLON       reduce using rule 30 (relational_expression -> relational_expression LE_OP multiplicative_expression .)
    RND_PAR_CLOSE   reduce using rule 30 (relational_expression -> relational_expression LE_OP multiplicative_expression .)
    CUR_PAR_OPEN    reduce using rule 30 (relational_expression -> relational_expression LE_OP multiplicative_expression .)
    COMMA           reduce using rule 30 (relational_expression -> relational_expression LE_OP multiplicative_expression .)
    BOX_PAR_CLOSE   reduce using rule 30 (relational_expression -> relational_expression LE_OP multiplicative_expression .)
    MUL             shift and go to state 50
    DIV             shift and go to state 51


state 90

    (31) relational_expression -> relational_expression GE_OP multiplicative_expression .
    (25) multiplicative_expression -> multiplicative_expression . MUL additive_expression
    (26) multiplicative_expression -> multiplicative_expression . DIV additive_expression

    LESS_OP         reduce using rule 31 (relational_expression -> relational_expression GE_OP multiplicative_expression .)
    GREATER_OP      reduce using rule 31 (relational_expression -> relational_expression GE_OP multiplicative_expression .)
    LE_OP           reduce using rule 31 (relational_expression -> relational_expression GE_OP multiplicative_expression .)
    GE_OP           reduce using rule 31 (relational_expression -> relational_expression GE_OP multiplicative_expression .)
    EQ_OP           reduce using rule 31 (relational_expression -> relational_expression GE_OP multiplicative_expression .)
    NE_OP           reduce using rule 31 (relational_expression -> relational_expression GE_OP multiplicative_expression .)
    AND_OP          reduce using rule 31 (relational_expression -> relational_expression GE_OP multiplicative_expression .)
    OR_OP           reduce using rule 31 (relational_expression -> relational_expression GE_OP multiplicative_expression .)
    SEMICOLON       reduce using rule 31 (relational_expression -> relational_expression GE_OP multiplicative_expression .)
    RND_PAR_CLOSE   reduce using rule 31 (relational_expression -> relational_expression GE_OP multiplicative_expression .)
    CUR_PAR_OPEN    reduce using rule 31 (relational_expression -> relational_expression GE_OP multiplicative_expression .)
    COMMA           reduce using rule 31 (relational_expression -> relational_expression GE_OP multiplicative_expression .)
    BOX_PAR_CLOSE   reduce using rule 31 (relational_expression -> relational_expression GE_OP multiplicative_expression .)
    MUL             shift and go to state 50
    DIV             shift and go to state 51


state 91

    (22) additive_expression -> additive_expression PLUS primary_expression .

    PLUS            reduce using rule 22 (additive_expression -> additive_expression PLUS primary_expression .)
    MINUS           reduce using rule 22 (additive_expression -> additive_expression PLUS primary_expression .)
    MUL             reduce using rule 22 (additive_expression -> additive_expression PLUS primary_expression .)
    DIV             reduce using rule 22 (additive_expression -> additive_expression PLUS primary_expression .)
    LESS_OP         reduce using rule 22 (additive_expression -> additive_expression PLUS primary_expression .)
    GREATER_OP      reduce using rule 22 (additive_expression -> additive_expression PLUS primary_expression .)
    LE_OP           reduce using rule 22 (additive_expression -> additive_expression PLUS primary_expression .)
    GE_OP           reduce using rule 22 (additive_expression -> additive_expression PLUS primary_expression .)
    EQ_OP           reduce using rule 22 (additive_expression -> additive_expression PLUS primary_expression .)
    NE_OP           reduce using rule 22 (additive_expression -> additive_expression PLUS primary_expression .)
    AND_OP          reduce using rule 22 (additive_expression -> additive_expression PLUS primary_expression .)
    OR_OP           reduce using rule 22 (additive_expression -> additive_expression PLUS primary_expression .)
    SEMICOLON       reduce using rule 22 (additive_expression -> additive_expression PLUS primary_expression .)
    RND_PAR_CLOSE   reduce using rule 22 (additive_expression -> additive_expression PLUS primary_expression .)
    CUR_PAR_OPEN    reduce using rule 22 (additive_expression -> additive_expression PLUS primary_expression .)
    COMMA           reduce using rule 22 (additive_expression -> additive_expression PLUS primary_expression .)
    BOX_PAR_CLOSE   reduce using rule 22 (additive_expression -> additive_expression PLUS primary_expression .)


state 92

    (23) additive_expression -> additive_expression MINUS primary_expression .

    PLUS            reduce using rule 23 (additive_expression -> additive_expression MINUS primary_expression .)
    MINUS           reduce using rule 23 (additive_expression -> additive_expression MINUS primary_expression .)
    MUL             reduce using rule 23 (additive_expression -> additive_expression MINUS primary_expression .)
    DIV             reduce using rule 23 (additive_expression -> additive_expression MINUS primary_expression .)
    LESS_OP         reduce using rule 23 (additive_expression -> additive_expression MINUS primary_expression .)
    GREATER_OP      reduce using rule 23 (additive_expression -> additive_expression MINUS primary_expression .)
    LE_OP           reduce using rule 23 (additive_expression -> additive_expression MINUS primary_expression .)
    GE_OP           reduce using rule 23 (additive_expression -> additive_expression MINUS primary_expression .)
    EQ_OP           reduce using rule 23 (additive_expression -> additive_expression MINUS primary_expression .)
    NE_OP           reduce using rule 23 (additive_expression -> additive_expression MINUS primary_expression .)
    AND_OP          reduce using rule 23 (additive_expression -> additive_expression MINUS primary_expression .)
    OR_OP           reduce using rule 23 (additive_expression -> additive_expression MINUS primary_expression .)
    SEMICOLON       reduce using rule 23 (additive_expression -> additive_expression MINUS primary_expression .)
    RND_PAR_CLOSE   reduce using rule 23 (additive_expression -> additive_expression MINUS primary_expression .)
    CUR_PAR_OPEN    reduce using rule 23 (additive_expression -> additive_expression MINUS primary_expression .)
    COMMA           reduce using rule 23 (additive_expression -> additive_expression MINUS primary_expression .)
    BOX_PAR_CLOSE   reduce using rule 23 (additive_expression -> additive_expression MINUS primary_expression .)


state 93

    (61) function_call -> IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE . SEMICOLON

    SEMICOLON       shift and go to state 108


state 94

    (59) parameter_list -> parameter_list COMMA . assignment_expression
    (39) assignment_expression -> . or_expression
    (40) assignment_expression -> . primary_expression EQUALS multiplicative_expression
    (37) or_expression -> . and_expression
    (38) or_expression -> . or_expression OR_OP and_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_OP equality_expression
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (27) relational_expression -> . multiplicative_expression
    (28) relational_expression -> . relational_expression LESS_OP multiplicative_expression
    (29) relational_expression -> . relational_expression GREATER_OP multiplicative_expression
    (30) relational_expression -> . relational_expression LE_OP multiplicative_expression
    (31) relational_expression -> . relational_expression GE_OP multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    assignment_expression          shift and go to state 109
    or_expression                  shift and go to state 21
    primary_expression             shift and go to state 36
    multiplicative_expression      shift and go to state 22
    and_expression                 shift and go to state 26
    literal                        shift and go to state 23
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32

state 95

    (55) identifier_list -> IDENTIFIER . COLON type_specifier

    COLON           shift and go to state 110


state 96

    (60) function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list . RND_PAR_CLOSE ARROW type_specifier compound_statement
    (56) identifier_list -> identifier_list . COMMA IDENTIFIER COLON type_specifier

    RND_PAR_CLOSE   shift and go to state 111
    COMMA           shift and go to state 112


state 97

    (54) identifier_list -> empty .

    RND_PAR_CLOSE   reduce using rule 54 (identifier_list -> empty .)
    COMMA           reduce using rule 54 (identifier_list -> empty .)


state 98

    (63) selection_statement -> IF assignment_expression compound_statement ELSE . compound_statement
    (50) compound_statement -> . CUR_PAR_OPEN CUR_PAR_CLOSE
    (51) compound_statement -> . CUR_PAR_OPEN statement_list CUR_PAR_CLOSE

    CUR_PAR_OPEN    shift and go to state 12

    compound_statement             shift and go to state 113

state 99

    (64) iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA . assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement
    (65) iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA . assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement
    (39) assignment_expression -> . or_expression
    (40) assignment_expression -> . primary_expression EQUALS multiplicative_expression
    (37) or_expression -> . and_expression
    (38) or_expression -> . or_expression OR_OP and_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . literal
    (20) primary_expression -> . RND_PAR_OPEN assignment_expression RND_PAR_CLOSE
    (35) and_expression -> . equality_expression
    (36) and_expression -> . and_expression AND_OP equality_expression
    (15) literal -> . INT_LITERAL
    (16) literal -> . FLOAT_LITERAL
    (17) literal -> . STRING_LITERAL
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (27) relational_expression -> . multiplicative_expression
    (28) relational_expression -> . relational_expression LESS_OP multiplicative_expression
    (29) relational_expression -> . relational_expression GREATER_OP multiplicative_expression
    (30) relational_expression -> . relational_expression LE_OP multiplicative_expression
    (31) relational_expression -> . relational_expression GE_OP multiplicative_expression
    (24) multiplicative_expression -> . additive_expression
    (25) multiplicative_expression -> . multiplicative_expression MUL additive_expression
    (26) multiplicative_expression -> . multiplicative_expression DIV additive_expression
    (21) additive_expression -> . primary_expression
    (22) additive_expression -> . additive_expression PLUS primary_expression
    (23) additive_expression -> . additive_expression MINUS primary_expression

    IDENTIFIER      shift and go to state 37
    RND_PAR_OPEN    shift and go to state 11
    INT_LITERAL     shift and go to state 27
    FLOAT_LITERAL   shift and go to state 28
    STRING_LITERAL  shift and go to state 29

    assignment_expression          shift and go to state 114
    or_expression                  shift and go to state 21
    primary_expression             shift and go to state 36
    multiplicative_expression      shift and go to state 22
    and_expression                 shift and go to state 26
    literal                        shift and go to state 23
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32

state 100

    (7) declarator -> LET IDENTIFIER COLON type_specifier .

    EQUALS          reduce using rule 7 (declarator -> LET IDENTIFIER COLON type_specifier .)
    SEMICOLON       reduce using rule 7 (declarator -> LET IDENTIFIER COLON type_specifier .)


state 101

    (9) type_specifier -> VOID .

    EQUALS          reduce using rule 9 (type_specifier -> VOID .)
    SEMICOLON       reduce using rule 9 (type_specifier -> VOID .)
    RND_PAR_CLOSE   reduce using rule 9 (type_specifier -> VOID .)
    COMMA           reduce using rule 9 (type_specifier -> VOID .)
    CUR_PAR_OPEN    reduce using rule 9 (type_specifier -> VOID .)


state 102

    (10) type_specifier -> CHAR .

    EQUALS          reduce using rule 10 (type_specifier -> CHAR .)
    SEMICOLON       reduce using rule 10 (type_specifier -> CHAR .)
    RND_PAR_CLOSE   reduce using rule 10 (type_specifier -> CHAR .)
    COMMA           reduce using rule 10 (type_specifier -> CHAR .)
    CUR_PAR_OPEN    reduce using rule 10 (type_specifier -> CHAR .)


state 103

    (11) type_specifier -> INT .

    EQUALS          reduce using rule 11 (type_specifier -> INT .)
    SEMICOLON       reduce using rule 11 (type_specifier -> INT .)
    RND_PAR_CLOSE   reduce using rule 11 (type_specifier -> INT .)
    COMMA           reduce using rule 11 (type_specifier -> INT .)
    CUR_PAR_OPEN    reduce using rule 11 (type_specifier -> INT .)


state 104

    (12) type_specifier -> FLOAT .

    EQUALS          reduce using rule 12 (type_specifier -> FLOAT .)
    SEMICOLON       reduce using rule 12 (type_specifier -> FLOAT .)
    RND_PAR_CLOSE   reduce using rule 12 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 12 (type_specifier -> FLOAT .)
    CUR_PAR_OPEN    reduce using rule 12 (type_specifier -> FLOAT .)


state 105

    (13) type_specifier -> STRING .

    EQUALS          reduce using rule 13 (type_specifier -> STRING .)
    SEMICOLON       reduce using rule 13 (type_specifier -> STRING .)
    RND_PAR_CLOSE   reduce using rule 13 (type_specifier -> STRING .)
    COMMA           reduce using rule 13 (type_specifier -> STRING .)
    CUR_PAR_OPEN    reduce using rule 13 (type_specifier -> STRING .)


state 106

    (14) type_specifier -> BOOL .

    EQUALS          reduce using rule 14 (type_specifier -> BOOL .)
    SEMICOLON       reduce using rule 14 (type_specifier -> BOOL .)
    RND_PAR_CLOSE   reduce using rule 14 (type_specifier -> BOOL .)
    COMMA           reduce using rule 14 (type_specifier -> BOOL .)
    CUR_PAR_OPEN    reduce using rule 14 (type_specifier -> BOOL .)


state 107

    (8) declarator -> CONST IDENTIFIER COLON type_specifier .

    EQUALS          reduce using rule 8 (declarator -> CONST IDENTIFIER COLON type_specifier .)
    SEMICOLON       reduce using rule 8 (declarator -> CONST IDENTIFIER COLON type_specifier .)


state 108

    (61) function_call -> IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON .

    IDENTIFIER      reduce using rule 61 (function_call -> IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON .)
    CUR_PAR_OPEN    reduce using rule 61 (function_call -> IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON .)
    FUNC            reduce using rule 61 (function_call -> IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON .)
    IF              reduce using rule 61 (function_call -> IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON .)
    FROM            reduce using rule 61 (function_call -> IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON .)
    WHILE           reduce using rule 61 (function_call -> IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON .)
    RND_PAR_OPEN    reduce using rule 61 (function_call -> IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON .)
    LET             reduce using rule 61 (function_call -> IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON .)
    CONST           reduce using rule 61 (function_call -> IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON .)
    INT_LITERAL     reduce using rule 61 (function_call -> IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON .)
    FLOAT_LITERAL   reduce using rule 61 (function_call -> IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON .)
    STRING_LITERAL  reduce using rule 61 (function_call -> IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON .)
    $end            reduce using rule 61 (function_call -> IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON .)
    CUR_PAR_CLOSE   reduce using rule 61 (function_call -> IDENTIFIER RND_PAR_OPEN parameter_list RND_PAR_CLOSE SEMICOLON .)


state 109

    (59) parameter_list -> parameter_list COMMA assignment_expression .

    RND_PAR_CLOSE   reduce using rule 59 (parameter_list -> parameter_list COMMA assignment_expression .)
    COMMA           reduce using rule 59 (parameter_list -> parameter_list COMMA assignment_expression .)


state 110

    (55) identifier_list -> IDENTIFIER COLON . type_specifier
    (9) type_specifier -> . VOID
    (10) type_specifier -> . CHAR
    (11) type_specifier -> . INT
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL

    VOID            shift and go to state 101
    CHAR            shift and go to state 102
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105
    BOOL            shift and go to state 106

    type_specifier                 shift and go to state 115

state 111

    (60) function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE . ARROW type_specifier compound_statement

    ARROW           shift and go to state 116


state 112

    (56) identifier_list -> identifier_list COMMA . IDENTIFIER COLON type_specifier

    IDENTIFIER      shift and go to state 117


state 113

    (63) selection_statement -> IF assignment_expression compound_statement ELSE compound_statement .

    IDENTIFIER      reduce using rule 63 (selection_statement -> IF assignment_expression compound_statement ELSE compound_statement .)
    CUR_PAR_OPEN    reduce using rule 63 (selection_statement -> IF assignment_expression compound_statement ELSE compound_statement .)
    FUNC            reduce using rule 63 (selection_statement -> IF assignment_expression compound_statement ELSE compound_statement .)
    IF              reduce using rule 63 (selection_statement -> IF assignment_expression compound_statement ELSE compound_statement .)
    FROM            reduce using rule 63 (selection_statement -> IF assignment_expression compound_statement ELSE compound_statement .)
    WHILE           reduce using rule 63 (selection_statement -> IF assignment_expression compound_statement ELSE compound_statement .)
    RND_PAR_OPEN    reduce using rule 63 (selection_statement -> IF assignment_expression compound_statement ELSE compound_statement .)
    LET             reduce using rule 63 (selection_statement -> IF assignment_expression compound_statement ELSE compound_statement .)
    CONST           reduce using rule 63 (selection_statement -> IF assignment_expression compound_statement ELSE compound_statement .)
    INT_LITERAL     reduce using rule 63 (selection_statement -> IF assignment_expression compound_statement ELSE compound_statement .)
    FLOAT_LITERAL   reduce using rule 63 (selection_statement -> IF assignment_expression compound_statement ELSE compound_statement .)
    STRING_LITERAL  reduce using rule 63 (selection_statement -> IF assignment_expression compound_statement ELSE compound_statement .)
    $end            reduce using rule 63 (selection_statement -> IF assignment_expression compound_statement ELSE compound_statement .)
    CUR_PAR_CLOSE   reduce using rule 63 (selection_statement -> IF assignment_expression compound_statement ELSE compound_statement .)


state 114

    (64) iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression . BOX_PAR_CLOSE COLON INC_OP compound_statement
    (65) iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression . BOX_PAR_CLOSE COLON DEC_OP compound_statement

    BOX_PAR_CLOSE   shift and go to state 118


state 115

    (55) identifier_list -> IDENTIFIER COLON type_specifier .

    RND_PAR_CLOSE   reduce using rule 55 (identifier_list -> IDENTIFIER COLON type_specifier .)
    COMMA           reduce using rule 55 (identifier_list -> IDENTIFIER COLON type_specifier .)


state 116

    (60) function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW . type_specifier compound_statement
    (9) type_specifier -> . VOID
    (10) type_specifier -> . CHAR
    (11) type_specifier -> . INT
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL

    VOID            shift and go to state 101
    CHAR            shift and go to state 102
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105
    BOOL            shift and go to state 106

    type_specifier                 shift and go to state 119

state 117

    (56) identifier_list -> identifier_list COMMA IDENTIFIER . COLON type_specifier

    COLON           shift and go to state 120


state 118

    (64) iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE . COLON INC_OP compound_statement
    (65) iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE . COLON DEC_OP compound_statement

    COLON           shift and go to state 121


state 119

    (60) function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier . compound_statement
    (50) compound_statement -> . CUR_PAR_OPEN CUR_PAR_CLOSE
    (51) compound_statement -> . CUR_PAR_OPEN statement_list CUR_PAR_CLOSE

    CUR_PAR_OPEN    shift and go to state 12

    compound_statement             shift and go to state 122

state 120

    (56) identifier_list -> identifier_list COMMA IDENTIFIER COLON . type_specifier
    (9) type_specifier -> . VOID
    (10) type_specifier -> . CHAR
    (11) type_specifier -> . INT
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL

    VOID            shift and go to state 101
    CHAR            shift and go to state 102
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105
    BOOL            shift and go to state 106

    type_specifier                 shift and go to state 123

state 121

    (64) iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON . INC_OP compound_statement
    (65) iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON . DEC_OP compound_statement

    INC_OP          shift and go to state 124
    DEC_OP          shift and go to state 125


state 122

    (60) function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement .

    IDENTIFIER      reduce using rule 60 (function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement .)
    CUR_PAR_OPEN    reduce using rule 60 (function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement .)
    FUNC            reduce using rule 60 (function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement .)
    IF              reduce using rule 60 (function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement .)
    FROM            reduce using rule 60 (function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement .)
    WHILE           reduce using rule 60 (function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement .)
    RND_PAR_OPEN    reduce using rule 60 (function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement .)
    LET             reduce using rule 60 (function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement .)
    CONST           reduce using rule 60 (function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement .)
    INT_LITERAL     reduce using rule 60 (function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement .)
    FLOAT_LITERAL   reduce using rule 60 (function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement .)
    STRING_LITERAL  reduce using rule 60 (function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement .)
    $end            reduce using rule 60 (function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement .)
    CUR_PAR_CLOSE   reduce using rule 60 (function_definition -> FUNC IDENTIFIER RND_PAR_OPEN identifier_list RND_PAR_CLOSE ARROW type_specifier compound_statement .)


state 123

    (56) identifier_list -> identifier_list COMMA IDENTIFIER COLON type_specifier .

    RND_PAR_CLOSE   reduce using rule 56 (identifier_list -> identifier_list COMMA IDENTIFIER COLON type_specifier .)
    COMMA           reduce using rule 56 (identifier_list -> identifier_list COMMA IDENTIFIER COLON type_specifier .)


state 124

    (64) iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP . compound_statement
    (50) compound_statement -> . CUR_PAR_OPEN CUR_PAR_CLOSE
    (51) compound_statement -> . CUR_PAR_OPEN statement_list CUR_PAR_CLOSE

    CUR_PAR_OPEN    shift and go to state 12

    compound_statement             shift and go to state 126

state 125

    (65) iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP . compound_statement
    (50) compound_statement -> . CUR_PAR_OPEN CUR_PAR_CLOSE
    (51) compound_statement -> . CUR_PAR_OPEN statement_list CUR_PAR_CLOSE

    CUR_PAR_OPEN    shift and go to state 12

    compound_statement             shift and go to state 127

state 126

    (64) iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement .

    IDENTIFIER      reduce using rule 64 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement .)
    CUR_PAR_OPEN    reduce using rule 64 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement .)
    FUNC            reduce using rule 64 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement .)
    IF              reduce using rule 64 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement .)
    FROM            reduce using rule 64 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement .)
    WHILE           reduce using rule 64 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement .)
    RND_PAR_OPEN    reduce using rule 64 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement .)
    LET             reduce using rule 64 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement .)
    CONST           reduce using rule 64 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement .)
    INT_LITERAL     reduce using rule 64 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement .)
    FLOAT_LITERAL   reduce using rule 64 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement .)
    STRING_LITERAL  reduce using rule 64 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement .)
    $end            reduce using rule 64 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement .)
    CUR_PAR_CLOSE   reduce using rule 64 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON INC_OP compound_statement .)


state 127

    (65) iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement .

    IDENTIFIER      reduce using rule 65 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement .)
    CUR_PAR_OPEN    reduce using rule 65 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement .)
    FUNC            reduce using rule 65 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement .)
    IF              reduce using rule 65 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement .)
    FROM            reduce using rule 65 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement .)
    WHILE           reduce using rule 65 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement .)
    RND_PAR_OPEN    reduce using rule 65 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement .)
    LET             reduce using rule 65 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement .)
    CONST           reduce using rule 65 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement .)
    INT_LITERAL     reduce using rule 65 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement .)
    FLOAT_LITERAL   reduce using rule 65 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement .)
    STRING_LITERAL  reduce using rule 65 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement .)
    $end            reduce using rule 65 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement .)
    CUR_PAR_CLOSE   reduce using rule 65 (iteration_statement -> FROM BOX_PAR_OPEN assignment_expression COMMA assignment_expression BOX_PAR_CLOSE COLON DEC_OP compound_statement .)

